{"version":3,"sources":["app/Navbar.tsx","app/ScrollTop.tsx","app/Footer.tsx","Home.tsx","features/api/apiSlice.ts","features/category/categorySlice.ts","app/libs/isEmpty.ts","app/table/Table.tsx","app/modal/Modal.tsx","app/actions/Actions.tsx","app/spinners/Spinner.tsx","app/alert/Alert.tsx","app/table/Paginator.tsx","app/spinners/ButtonSpinner.tsx","app/table/DataTable.tsx","app/libs/generateQuery.ts","app/form/fields.tsx","features/category/CategoriesList.tsx","app/card/FormCard.tsx","features/category/CategorySchema.ts","features/category/AddCategoryForm.tsx","features/category/EditCategoryForm.tsx","features/product/productSlice.ts","features/product/ProductsList.tsx","features/product/ProductSchema.ts","features/product/AddProductForm.tsx","features/product/EditProductForm.tsx","features/purchase/purchaseSlice.ts","features/purchase/PurchasesList.tsx","features/supplier/supplierSlice.ts","features/purchase/PurchaseSchema.ts","features/purchase/AddPurchaseForm.tsx","features/purchase/EditPurchaseForm.tsx","features/sale/salesSlice.ts","features/sale/SalesList.tsx","features/sale/SaleSchema.ts","features/sale/AddSaleForm.tsx","features/sale/EditSaleForm.tsx","features/supplier/SuppliersList.tsx","features/supplier/SupplierSchema.ts","features/supplier/AddSupplierForm.tsx","features/supplier/EditSupplierForm.tsx","features/transfer/transferSlice.ts","features/transfer/TransfersList.tsx","features/transfer/TransferSchema.ts","features/transfer/AddTransferForm.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Navbar","className","to","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","exact","ScrollTop","useState","showButton","setShowButton","useEffect","window","addEventListener","pageYOffset","onClick","scrollTo","top","behavior","Footer","href","Home","emptySplitApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","process","BASE_URL","tagTypes","endpoints","categoryApi","injectEndpoints","builder","getCategories","query","url","length","validateStatus","response","result","error","ok","providesTags","arg","categories","map","getCategory","invalidData","addNewCategory","mutation","category","method","body","invalidatesTags","editCategory","destroyCategory","useGetCategoriesQuery","useGetCategoryQuery","useAddNewCategoryMutation","useEditCategoryMutation","useDestroyCategoryMutation","isEmpty","value","undefined","Object","keys","trim","Table","cols","data","checked","setChecked","selection","item","ids","selectAllRef","useRef","checkedItems","filter","current","indeterminate","handleClick","event","target","temp","isChecked","renderTd","col","tdChild","label","callback","accessor","link","split","path","itemId","renderCheckbox","render","checkbox","onChange","ref","scope","style","width","renderSelectAllCheckbox","index","name","Modal","title","handleAction","actionLabel","modalHeader","data-bs-dismiss","modalBody","modalFooter","tabIndex","aria-labelledby","aria-hidden","Actions","handleDestroy","rows","useMemo","toLowerCase","Spinner","role","height","Alert","message","setMessage","timeout","show","setShow","timer","setTimeout","clearTimeout","Paginator","pageLimits","handleCurrentPageChange","handleLimitChange","rest","count","offset","limit","currentPage","onEachSide","from","setFrom","setTo","pageList","pages","setPages","getPages","useCallback","totalPages","Math","ceil","first","prev","next","last","i","push","page","lastElement","showPaginator","usePaginator","handlePageClick","handlePageLimitChange","parseInt","PageItem","PageList","PageLimitOptions","pageLimitOptions","toString","htmlFor","ButtonSpinner","text","SearchForm","initialValues","FormInputs","handleSubmit","onSubmit","values","actions","setSubmitting","props","disabled","isSubmitting","DataTable","pagination","handleQuery","destroyChecked","createItemLink","displayMessages","searchFormInitialValues","SearchFormInputs","isLoading","setIsLoading","setPage","setLimit","searchFormValues","setSearchFormValues","stringifiedSearchFormValues","JSON","stringify","stringifiedData","location","useLocation","history","useHistory","state","replace","obj","entries","key","join","FieldWrapper","inline","idOrName","required","children","classes","div","ErrorMessage","meta","touched","fieldClassName","validation","Input","useField","field","Select","options","selectOptions","option","TextArea","CategoriesSearchForm","placeholder","CategoriesList","React","memo","setQuery","isSuccess","a","unwrap","FormCard","cardBody","cardFooter","CategorySchema","Yup","shape","typeError","min","max","matches","description","AddCategoryForm","form","validationSchema","pathname","setErrors","EditCategoryForm","categoryId","match","params","updateCategory","enableReinitialize","isFetching","productApi","getProducts","products","getProduct","addNewProduct","editProduct","destroyProduct","useGetProductsQuery","useGetProductQuery","useAddNewProductMutation","useEditProductMutation","useDestroyProductMutation","ProductsSearchForm","ProductsList","ProductSchema","unitCost","positive","test","number","unitPrice","store","integer","counter","AddProductForm","product","EditProductForm","productId","updateProduct","categoriesResult","purchaseApi","getPurchases","purchases","getPurchase","addNewPurchase","editPurchase","destroyPurchase","useGetPurchasesQuery","useGetPurchaseQuery","useAddNewPurchaseMutation","useEditPurchaseMutation","useDestroyPurchaseMutation","PurchasesSearchForm","PurchasesList","supplier","supplierApi","getSuppliers","suppliers","getSupplier","addNewSupplier","editSupplier","destroySupplier","useGetSuppliersQuery","useGetSupplierQuery","useAddNewSupplierMutation","useEditSupplierMutation","useDestroySupplierMutation","PurchaseSchema","supplierId","quantity","parseFloat","this","parent","oneOf","AddPurchaseForm","allProducts","allSuppliers","purchase","EditPurchaseForm","purchaseId","updatePurchase","saleApi","getSales","sales","getSale","addNewSale","editSale","cancelSale","destroySale","useGetSalesQuery","useGetSaleQuery","useAddNewSaleMutation","useEditSaleMutation","useCancelSaleMutation","useDestroySaleMutation","SalesSearchForm","SalesList","SaleSchema","AddSaleForm","sale","EditSaleForm","saleId","updateSale","handleCancel","SuppliersSearchForm","SuppliersList","SupplierSchema","phone","email","AddSupplierForm","EditSupplierForm","updateSupplier","transferApi","getTransfers","transfers","getTransfer","addNewTransfer","destroyTransfer","useGetTransfersQuery","useAddNewTransferMutation","useGetTransferQuery","useDestroyTransferMutation","TransfersSearchForm","TransfersList","TransferSchema","source","AddTransferForm","destination","transfer","App","component","configureStore","reducer","middleware","getDefaultMiddleware","concat","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.fb272c70.chunk.js","sourcesContent":["import { Link, NavLink } from \"react-router-dom\";\n\nexport default function Navbar() {\n    return (\n        <nav className=\"navbar navbar-expand-md navbar-dark bg-success\">\n            <div className=\"container-fluid\">\n                <Link className=\"navbar-brand\" to=\"/\">Inventory Manager</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\"\n                        data-bs-target=\"#navbarContent\" aria-controls=\"navbarContent\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\" />\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarContent\">\n                    <ul className=\"nav nav-pills\">\n                        <li className=\"nav-item\">\n                            <NavLink exact to=\"/\" className=\"nav-link text-white\">Home</NavLink>\n                        </li>\n\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/categories\" className=\"nav-link text-white\">Categories</NavLink>\n                        </li>\n\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/products\" className=\"nav-link text-white\">Products</NavLink>\n                        </li>\n\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/purchases\" className=\"nav-link text-white\">Purchases</NavLink>\n                        </li>\n\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/sales\" className=\"nav-link text-white\">Sales</NavLink>\n                        </li>\n\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/suppliers\" className=\"nav-link text-white\">Suppliers</NavLink>\n                        </li>\n\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/transfers\" className=\"nav-link text-white\">Transfers</NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    );\n}\n","import {useEffect, useState} from \"react\";\nimport \"../scrollTop.css\";\n\nexport const ScrollTop = () => {\n    const [showButton, setShowButton] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.pageYOffset > 300) {\n                setShowButton(true);\n            } else {\n                setShowButton(false);\n            }\n        });\n    }, []);\n\n    const scrollToTop = () => {\n        window.scrollTo({\n            top: 0,\n            behavior: \"smooth\",\n        });\n    };\n\n    return (\n        <>\n\n            {showButton && (\n                <button\n                    onClick={scrollToTop}\n                    className=\"btn btn-primary border-0 rounded-circle\"\n                    id=\"scroll-to-top-btn\"\n                >\n                    <i className=\"arrow up\" />\n                </button>\n            )}\n        </>\n    )\n}","export const Footer = () => {\n    return (\n        <footer className=\"mt-2 py-3 bg-light\">\n            <div className=\"container-fluid\">\n                <span>Developed by <a href=\"https://github.com/martin-nderitu\">Martin Nderitu</a></span>\n            </div>\n        </footer>\n    )\n}","const Home = () => {\n    return (\n        <div className=\"container-fluid pt-3\">\n            <div className=\"card border-0 rounded-0 text-white bg-success\">\n                <div className=\"card-body\">\n                    <h2 className=\"card-title\">React Redux Inventory Manager</h2>\n                    <p className=\"card-text\">Manage your inventory conveniently</p>\n                </div>\n            </div>\n\n            <div className=\"card border-0 rounded-0 text-white bg-success\">\n                <div className=\"card-body\">\n                    <h3 className=\"card-title\">Features</h3>\n                </div>\n            </div>\n\n            <div className=\"card-group\">\n                <div className=\"card border-0 rounded-0 text-white bg-success\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Manage products, categories & transfers</h5>\n                        <p className=\"card-text\">\n                            Create, read, update and delete products, product categories and\n                            product transfers\n                        </p>\n                    </div>\n                </div>\n\n                <div className=\"card border-0 rounded-0 text-white bg-success\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Manage purchases & suppliers</h5>\n                        <p className=\"card-text\">\n                            Create, read, update and delete purchases and suppliers\n                        </p>\n                        <p className=\"card-text\">\n                            Purchases module is used to add stock to the system\n                        </p>\n                    </div>\n                </div>\n\n                <div className=\"card border-0 rounded-0 text-white bg-success\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Manage sales</h5>\n                        <p className=\"card-text\">\n                            Create, read, update and delete product sales\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;\n","import {createApi, fetchBaseQuery} from \"@reduxjs/toolkit/dist/query/react\";\n\nexport const emptySplitApi = createApi({\n    reducerPath: \"api\",\n    baseQuery: fetchBaseQuery({ baseUrl:\n      `${process.env.BASE_URL || \"http://amanahtoko.local:5000/api/v1\"}`\n    }),\n    tagTypes: [\"Category\", \"Product\", \"Purchase\", \"Sale\", \"Supplier\", \"Transfer\"],\n    endpoints: () => ({}),\n})\n","import {emptySplitApi} from \"../api/apiSlice\";\nimport {Categories, CategoryState, DraftCategory, Error, FormErrors, Message} from \"../api\";\n\nexport const categoryApi = emptySplitApi.injectEndpoints({\n    endpoints: (builder) => ({\n        getCategories: builder.query<Categories | Error, string | void>({\n            query: (query) => ({\n                url: query && query.length ? `/categories${query}`: \"/categories\",\n                validateStatus: (response, result) => {\n                    if (result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => {\n                if (result?.categories) {\n                    return [\"Category\", ...result.categories.map(({ id }) => ({type: \"Category\" as const, id}))]\n                } else {\n                    return [\"Category\"]\n                }\n            }\n        }),\n        getCategory: builder.query<CategoryState | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/categories/${id}`,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => [{ type: \"Category\", id: arg }]\n        }),\n        addNewCategory: builder.mutation<CategoryState | FormErrors | Error, DraftCategory>({\n            query: (category) => ({\n                url: \"/categories\",\n                method: \"POST\",\n                body: category,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Category\"]\n        }),\n        editCategory: builder.mutation<CategoryState | FormErrors | Error, DraftCategory>({\n            query: (category) => ({\n                url: \"/categories\",\n                method: \"PATCH\",\n                body: category,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: (result, error, arg) => [{ type: \"Category\", id: arg.id }]\n        }),\n        destroyCategory: builder.mutation<Message | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/categories/${id}`,\n                method: \"DELETE\",\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Category\"]\n        })\n    })\n})\n\nexport const {\n    useGetCategoriesQuery,\n    useGetCategoryQuery,\n    useAddNewCategoryMutation,\n    useEditCategoryMutation,\n    useDestroyCategoryMutation,\n} = categoryApi;","export function isEmpty (value: any) {\n    return value === undefined ||\n        value === null ||\n        (typeof value === \"object\" && Object.keys(value).length === 0) ||\n        (typeof value === \"string\" && value.trim().length === 0);\n}","import {useState, useEffect, useRef} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {isEmpty} from \"../libs/isEmpty\";\nimport {TableProps} from \"./index\";\n\n\nexport default function Table ({ cols, data, checked, setChecked, selection }: TableProps) {\n    const [ids] = useState<string[]>(() => {\n        if (selection) { return data.map((item) => item.id) }\n        else { return [] }\n    });\n    const selectAllRef = useRef<HTMLInputElement | null>(null);\n\n    useEffect(() => {\n        const checkedItems = Object.keys(checked).filter(id => checked[id]);\n       if (selectAllRef.current !== null) {\n           selectAllRef.current.indeterminate = checkedItems.length > 0 && checkedItems.length !== ids.length;\n       }\n    }, [ids.length, checked]);\n\n    // handle checkbox click\n    const handleClick = (event: any) => {\n        const {target} = event;\n        const temp: any = {};\n\n        if (target.id === \"0\") {    // id for select all checkbox\n            for (const id of ids) { temp[id] = target.checked; }\n        } else {\n            temp[target.id] = target.checked;\n        }\n        setChecked({...checked, ...temp});\n    }\n\n    // check whether a checkbox is checked\n    const isChecked = (id: number) => {\n        if (isEmpty(checked)) { return false; }\n\n        if (id === 0) {\n            for (const id of ids) {\n                if (!checked[id]) { return false; }\n            }\n            return true;\n        }\n        return !!checked[id];\n    }\n\n    const renderTableHeader = () => {\n        return cols.map( (col, index) => {\n            return (\n                <th key={col.name} scope=\"col\">{col.name}</th>\n            );\n        });\n    }\n\n    const renderTd = (item: any) => {\n        return cols.map( (col) => {\n            let label = \"\";\n            let tdChild: JSX.Element;\n\n            if (col.callback) { label = col.callback(item[col.accessor]) }\n            else { label = item[col.accessor] }\n\n            if (col.link) {\n                const [path, itemId] = col.link.split(\":\");\n                tdChild = <Link to={ `${path}${item[itemId]}` }>{ label }</Link>\n            } else {\n                tdChild = <> { label } </>\n            }\n\n            return (\n                <td key={ `${col.accessor}${item.id}` } className=\"text-left\">{ tdChild }</td>\n            );\n        });\n    }\n\n    const renderSelectAllCheckbox = (render: boolean) => {\n        const checkbox = (\n            <input\n                key=\"selectAll\"\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                // @ts-ignore\n                id={0}\n                checked={isChecked(0)}\n                onChange={handleClick}\n                // @ts-ignore\n                ref={selectAllRef}\n            />\n        );\n\n        if (render) return (\n            <th scope=\"col\" style={{width: 50}}>{checkbox}</th>\n        );\n    }\n\n    const renderCheckbox = (render: boolean, id: any) => {\n        const checkbox = (\n            <input\n                key={`item${id}`}\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id={id}\n                checked={isChecked(id)}\n                onChange={handleClick}\n            />\n        );\n\n        if (render) return (\n            <td key={`checkbox${id}`}>{checkbox}</td>\n        );\n    }\n\n    const renderTableBody = () => {\n        return data.map( (item) => {\n            return (\n                <tr key={`tr${item.id}`}>\n                    {renderCheckbox(selection, item.id)}\n                    { renderTd(item) }\n                </tr>\n            );\n        });\n    }\n\n    return (\n        <div className=\"table-responsive\">\n            <table className=\"table table-hover\">\n                <thead className=\"text-white bg-success\">\n                <tr>\n                    { renderSelectAllCheckbox(selection) }\n                    { renderTableHeader() }\n                </tr>\n                </thead>\n                <tbody>\n                    { renderTableBody() }\n                </tbody>\n            </table>\n        </div>\n    );\n}\n","import {ModalProps} from \"./index\";\n\nexport default function Modal({ id, label, title, body, handleAction, actionLabel = \"Delete\" }: ModalProps) {\n\n    const modalHeader = (\n        <div className=\"modal-header rounded-0 text-white bg-success\">\n            <h5 className=\"modal-title\" id={title}>{title}</h5>\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"/>\n        </div>\n    );\n\n    const modalBody = (\n        <div className=\"modal-body text-dark\">\n            <p className=\"text-lg-start\">{body}</p>\n        </div>\n    );\n\n    const modalFooter = (\n        <div className=\"modal-footer border-white\">\n            <button type=\"button\" className=\"btn btn-secondary rounded-0\" data-bs-dismiss=\"modal\">Close</button>\n            <button type=\"button\" className=\"btn btn-danger rounded-0\" onClick={handleAction} data-bs-dismiss=\"modal\">\n                {actionLabel}\n            </button>\n        </div>\n    );\n\n    return (\n        // @ts-ignore\n        <div className=\"modal fade\" id={id} tabIndex=\"-1\" aria-labelledby={label} aria-hidden=\"true\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content rounded-0\">\n                    {modalHeader}\n                    {modalBody}\n                    {modalFooter}\n                </div>\n            </div>\n        </div>\n    );\n}\n","import {useMemo} from \"react\";\n\nimport Modal from \"../modal/Modal\";\nimport {ActionsProps} from \"./index\";\n\n\n// TODO - add other actions (print, export (csv, pdf))\nexport default function Actions ({ checked, title, handleDestroy }: ActionsProps) {\n    const rows = useMemo(() => {\n        return Object.keys(checked).filter(id => checked[id]).length\n    }, [checked]);\n\n    return (\n        <>\n            {rows > 0 && (\n                <div className=\"mt-3\">\n                    <span className=\"me-2\">{rows} {title.toLowerCase()} selected. With selected:</span>\n                    <button\n                        type=\"button\"\n                        className=\"ml-3 btn btn-danger rounded-0\"\n                        data-bs-toggle=\"modal\"\n                        data-bs-target=\"#deleteChecked\"\n                    >\n                        Delete\n                    </button>\n                    <Modal\n                        id=\"deleteChecked\"\n                        label=\"deleteCheckedLabel\"\n                        title={`Delete ${title}`}\n                        body={`You are about to delete ${rows} ${title.toLowerCase()}. This action cannot be undone.`}\n                        handleAction={handleDestroy}\n                    />\n                </div>\n            )}\n        </>\n    );\n}\n","export default function Spinner() {\n    return (\n        <>\n            <div className=\"d-flex justify-content-center\">\n                <div className=\"spinner-border text-primary\" role=\"status\" style={{ width: \"3rem\", height: \"3rem\"}}/>\n            </div>\n            <div className=\"d-flex justify-content-center\" />\n        </>\n    );\n}\n","import {useState, useEffect} from \"react\";\nimport {isEmpty} from \"../libs/isEmpty\";\nimport {AlertProps} from \"./index\";\n\n\nexport default function Alert ({ message, setMessage, timeout=10000 }: AlertProps) {\n    const [show, setShow] = useState(true);\n\n    useEffect( () => {\n        if (timeout) {\n            const timer = setTimeout(() => {\n                setShow(false);\n                setMessage(null);\n            }, timeout);\n            return () => clearTimeout(timer);\n        }\n    }, [setMessage, timeout]);\n\n    const handleClick = () => {\n        setShow(false);\n        setMessage(null);\n    }\n\n    return (\n        <>\n            { show && message && !isEmpty(message) && (\n                <div className={`alert alert-${message.type} alert-dismissible fade show rounded-0`} role=\"alert\">\n                    {message.message}\n                    <button type=\"button\" className=\"btn-close\" onClick={handleClick} aria-label=\"Close\"/>\n                </div>\n            )}\n        </>\n    );\n};","import {useEffect, useState, useCallback} from \"react\";\nimport {PaginatorProps, UsePaginatorProps, Pages} from \"./index\";\n\nfunction usePaginator ({ count, offset = 0, limit = count, currentPage = 1, onEachSide = 3 }: UsePaginatorProps) {\n    const [from, setFrom] = useState(1);\n    const [to, setTo] = useState(1);\n    const [pages, setPages] = useState<Pages>( { pageList: [] });\n\n    const getPages = useCallback(() => {\n        const totalPages = (Math.ceil(count / limit));\n        const pages: Pages = { pageList: [] };\n        const pageList: (\"...\" | number)[] = [];\n\n        if (currentPage > 1) {\n            pages.first = 1;\n            pages.prev = currentPage - 1;\n        }\n\n        if (currentPage < totalPages) {\n            pages.next = currentPage + 1;\n            pages.last = totalPages;\n        }\n\n        // pages on left of currentPage along with the current page\n        if (currentPage > onEachSide) {   // to avoid negative pages\n            for (let i = onEachSide; i >= 0; i--) { // >= ensures the current page is pushed\n                pageList.push(currentPage - i)\n            }\n        } else {\n            for (let i = 1; i <= currentPage; i++) {\n                pageList.push(i);\n            }\n        }\n\n        // pages on right of currentPage\n        for (let i = 1; i <= onEachSide; i++) {\n            let page = currentPage + i;\n            if (page > totalPages) { break; }\n            pageList.push(page);\n        }\n\n        if (pageList.length) {\n            const lastElement = pageList[pageList.length-1];\n            if (lastElement && lastElement < totalPages) {\n                pageList.push(\"...\", totalPages);\n            }\n        }\n\n        pages.pageList = pageList;\n        return pages;\n    }, [count, limit, currentPage, onEachSide]);\n\n    useEffect(() => {\n        setPages(getPages());\n        setFrom(offset + 1);\n        let to = offset + limit;\n        to = to > count ? count : to;\n        setTo(to);\n    }, [getPages, offset, limit, count]);\n\n\n    return {\n        from, to, count, pages, currentPage, showPaginator: Math.ceil(count / limit) > 1\n    }\n}\n\nexport default function Paginator ({ pageLimits, handleCurrentPageChange, handleLimitChange, ...rest }: PaginatorProps) {\n    const { from, to, count, pages, currentPage, showPaginator } = usePaginator(rest);\n\n    const handlePageClick = (page: number) => handleCurrentPageChange(page)\n\n    const handlePageLimitChange = (event: any) => {\n        let { value } = event.target;\n        if (value) {\n            if (value !== \"all\") { value = parseInt(value) }\n            handleLimitChange(value)\n        }\n    }\n\n    const PageItem = ({ page, label } : { page: number | undefined, label: string }) => {\n        if (page === undefined) { return <></> }\n\n        return (\n            <li className=\"page-item\">\n                <button className=\"page-link\" onClick={() => handlePageClick(page)}>\n                    {label}\n                </button>\n            </li>\n        );\n    }\n\n    const PageList = () => {\n        const pageList = pages.pageList.map( page => {\n            if (page === \"...\") {\n                return (\n                    <li key={page} className=\"page-item\">\n                        <span className=\"p-2\">...</span>\n                    </li>\n                )\n            }\n            return (\n                <li key={page} className={\"page-item\" + (page === currentPage ? \" active\" : \"\")}>\n                    <button className=\"page-link\" onClick={() => handlePageClick(page)}>{page}</button>\n                </li>\n            );\n        });\n        return <>{pageList}</>\n    }\n\n    const PageLimitOptions = () => {\n        const pageLimitOptions = pageLimits.map( limit =>\n            <option key={limit} value={limit}>{limit.toString()}</option>\n        );\n\n        return (\n            <div className=\"float-md-end\">\n                <label htmlFor=\"limit\">Rows:</label>\n                <select\n                    name=\"limit\"\n                    className=\"form-select-sm ms-2\"\n                    onChange={handlePageLimitChange}\n                    value={rest.limit ? rest.limit.toString() : \"all\"}\n                >\n                    {pageLimitOptions}\n                </select>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"mb-3\">\n            <div className=\"row mb-3\">\n                <div className=\"col-12\">\n                    {showPaginator && (\n                        <nav className=\"float-md-start\" aria-label=\"paginator\">\n                            <ul className=\"pagination\" id=\"pager\">\n                                <PageItem page={pages.first} label=\"First\" />\n                                <PageItem page={pages.prev} label=\"Prev\" />\n                                <PageList/>\n                                <PageItem page={pages.next} label=\"Next\" />\n                                <PageItem page={pages.last} label=\"Last\" />\n                            </ul>\n                        </nav>\n                    )}\n                    <PageLimitOptions/>\n                </div>\n            </div>\n\n            <div className=\"text-lg-start\">\n                Showing {from} to {to} of {count} records\n            </div>\n        </div>\n    );\n}\n","import {ButtonSpinnerProps} from \"./index\";\n\nexport default function ButtonSpinner({ text = null }: ButtonSpinnerProps) {\n    return (\n        <>\n            {text && <span className=\"p-2\">{text}</span>}\n            <span className=\"spinner-border spinner-border-sm\" role=\"status\"/>\n        </>\n    );\n}\n","import {useState, useEffect} from \"react\";\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\nimport Table from \"./Table\";\nimport Actions from \"../actions/Actions\";\nimport Spinner from \"../spinners/Spinner\";\nimport Alert from \"../alert/Alert\";\nimport Paginator from \"./Paginator\";\nimport {DataTableProps, SearchFormProps} from \"./index\";\nimport {Formik} from \"formik\";\nimport ButtonSpinner from \"../spinners/ButtonSpinner\";\nimport {isEmpty} from \"../libs/isEmpty\";\nimport {generateQuery} from \"../libs/generateQuery\";\nimport {Message} from \"../index\";\n\n\ninterface LocationState {\n    message?: Message;\n}\n\nfunction SearchForm({ initialValues, FormInputs, handleSubmit }: SearchFormProps) {\n    return (\n        <Formik\n            initialValues={initialValues}\n            onSubmit={(values, actions) => {\n                handleSubmit(values);\n                actions.setSubmitting(false);\n            }}\n        >\n            {props => (\n                <div className=\"container-fluid pt-3\">\n                    <form onSubmit={props.handleSubmit} className=\"row gy-2 gx-3 align-items-center\">\n                        <FormInputs />\n\n                        <div className=\"col-auto\">\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary rounded-0\"\n                                disabled={props.isSubmitting}\n                            >\n                                {props.isSubmitting ? <ButtonSpinner /> : \"Search\"}\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            )}\n        </Formik>\n    );\n}\n\nexport default function DataTable (props: DataTableProps) {\n    const {\n        cols,\n        data = null,\n        pagination,\n        title,\n        message,\n        setMessage,\n        handleQuery,\n        destroyChecked,\n        createItemLink,\n        displayMessages = true,    // display alert messages\n        selection = true,\n        pageLimits = [5, 10, 15, 25, 50, \"all\"],\n        searchFormInitialValues,\n        SearchFormInputs,   // html input fields for search form\n    } = props;\n    const [checked, setChecked] = useState<{[k: string]: boolean}>({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [page, setPage] = useState(1);\n    const [limit, setLimit] = useState(5);\n    const [searchFormValues, setSearchFormValues] = useState<{ [k: string]: string }>(\n        searchFormInitialValues || {}\n    );\n    const stringifiedSearchFormValues = JSON.stringify(searchFormValues);\n    const stringifiedData = JSON.stringify(data);\n    const location = useLocation<LocationState>();\n    const history = useHistory<LocationState>();\n\n    useEffect(() => {\n        if (location.state?.message) {\n            setMessage(location.state.message);\n            history.replace({ state: {} });\n        }\n    }, [history, location.state?.message, setMessage]);\n\n    useEffect(() => {\n        if (stringifiedData !== \"null\") { setIsLoading(false) }\n    }, [stringifiedData])\n\n    useEffect(() => {\n        setPage(1)\n    }, [stringifiedSearchFormValues, limit]);\n\n    useEffect(() => {\n        const query = generateQuery({ ...searchFormValues, page, limit });\n        handleQuery(query);\n    },[page, limit, stringifiedSearchFormValues, handleQuery, searchFormValues]);\n\n    const handleSearchFormSubmit = (values: {[k: string]: string}) => setSearchFormValues({...values});\n\n    const handleDestroy = () => {\n        destroyChecked(Object.keys(checked).filter(id => checked[id]));\n        setChecked({});\n    }\n\n    return (\n        <div className=\"container-fluid pt-3\">\n            { displayMessages && message && (\n                <div className=\"pb-1\">\n                    <Alert message={message} setMessage={setMessage} />\n                </div>\n            )}\n            <div className=\"card shadow-lg rounded-0\">\n                <div className=\"card-header text-white bg-success rounded-0\">\n                    <h4 className=\"text-lg-start float-md-start\">{title}</h4>\n\n                    {createItemLink && (\n                        <Link to={createItemLink} className=\"btn btn-primary float-md-end rounded-0\">Create</Link>\n                    )}\n\n                    {SearchFormInputs && searchFormInitialValues && !isEmpty(searchFormInitialValues) && (\n                        <div className=\"row col-12\">\n                            <SearchForm\n                                initialValues={searchFormInitialValues}\n                                FormInputs={SearchFormInputs}\n                                handleSubmit={handleSearchFormSubmit}\n                            />\n                        </div>\n                    )}\n\n                    <Actions\n                        checked={checked}\n                        title={title}\n                        handleDestroy={handleDestroy}\n                    />\n\n                </div>\n\n                <div className=\"card-body\">\n                    {isLoading ? <Spinner/> : (\n                        <>\n                            {data && data.length > 0 ?\n                                <Table\n                                    cols={cols}\n                                    data={data}\n                                    checked={checked}\n                                    setChecked={setChecked}\n                                    selection={selection}\n                                />\n                                : <h3 className=\"text-center\">No {title.toLowerCase()} found</h3>\n                            }\n                        </>\n                    )}\n                </div>\n\n                {data && data.length > 0 && (\n                    <div className=\"card-footer border-white\">\n                        <Paginator\n                            {...pagination}\n                            pageLimits={pageLimits}\n                            handleCurrentPageChange={setPage}\n                            handleLimitChange={setLimit}\n                        />\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n","/**\n * generates a url query from an object\n * @param obj\n */\nexport function generateQuery(obj: { [k: string]: string | number }) {\n    return \"?\" + Object.entries(obj).map( ([key, value]) => {\n        if (value) { return `${key}=${value}` }\n        return undefined;\n    }).filter( (value) => value !== undefined ).join(\"&\");\n}","import { FC } from \"react\";\nimport { useField, FieldMetaProps } from \"formik\";\nimport {\n    FieldWrapperProps, InputField, SelectField, SelectFieldOption, DataListField, TextAreaField\n} from \"./index\";\n\n\nconst FieldWrapper = ({ inline, idOrName, label, required, children }: FieldWrapperProps) => {\n    const classes = inline\n        ? { div: \"col-auto\", label: \"visually-hidden\" }\n        : { div: \"mb-3\", label: \"form-label\" };\n\n    return (\n        <div className={classes.div}>\n            <label className={classes.label} htmlFor={idOrName}>\n                {label}\n                { required && <span className=\"text-danger\"> *</span> }\n            </label>\n            {children}\n        </div>\n    );\n}\n\nconst ErrorMessage = ({ meta }: { meta: FieldMetaProps<any> }) => {\n    const {touched, error} = meta;\n    \n    return (\n        <>\n            {touched && error && (\n                <div className=\"form-text text-danger text-md-start\" key={error}>\n                    <span>{error}</span>\n                </div>\n            )}\n        </>\n    );\n}\n\nconst fieldClassName = (meta: FieldMetaProps<any>, value: string | number | readonly string[]=\"\", validation = true) => {\n    const { touched, error } = meta;\n\n    let classes = \"form-control rounded-0\";\n\n    if (validation) {\n        if (touched && error) { classes += \" is-invalid\" }\n        if (touched && !error) { classes += \" is-valid\" }\n    }\n    return classes;\n}\n\nconst Input: FC<InputField> = ({ label, inline=false, validation, ...props }) => {\n    const [field, meta] = useField(props);\n\n    return (\n        <FieldWrapper inline={inline} idOrName={ props.id || props.name } label={label} required={props.required}>\n            <input className={fieldClassName(meta, props.value, validation)} {...field} {...props} />\n            <ErrorMessage meta={meta} />\n        </FieldWrapper>\n    )\n}\n\nconst Checkbox: FC<InputField> = ({ label, inline=false, validation, ...props}) => {\n    const [field, meta] = useField(props);\n\n    const checkBox =  (\n        <div className=\"mt-3 mb-3 form-check\">\n            <input className=\"form-check-input\" type=\"checkbox\" {...field} {...props} />\n            <label className=\"form-check-label\" htmlFor={props.id || props.name}>\n                {label}\n                { props.required && <span className=\"text-danger\"> *</span> }\n            </label>\n            <ErrorMessage meta={meta} />\n        </div>\n    );\n\n    if (inline) { return ( <div className=\"col-auto\">{checkBox}</div> ) }\n    return (checkBox);\n}\n\nconst Select: FC<SelectField> = ({ label, inline=false, validation, options, children, ...props}) => {\n    const [field, meta] = useField(props);\n\n    const selectOptions = (() => {\n        if (options?.length) {\n            return (\n                options.map((option: SelectFieldOption) => {\n                    if (typeof option === \"string\") {\n                        return <option key={option} value={option}>{option}</option>\n                    }\n                    return (\n                        <option key={`${option.value}`} value={option.value}>\n                            {option.label}\n                        </option>\n                    )\n                })\n            )\n        }\n    })();\n\n    return (\n        <FieldWrapper inline={inline} idOrName={props.name} label={label} required={props.required}>\n            <select className={fieldClassName(meta, props.value, validation)} {...field} {...props}>\n                <>\n                    {children}\n                    {selectOptions}\n                </>\n            </select>\n            <ErrorMessage meta={meta} />\n        </FieldWrapper>\n    );\n}\n\nconst DataList: FC<DataListField> = ({ label, inline=false, validation, options, ...props}) => {\n    const [field, meta] = useField(props);\n\n    const dataList = (\n        <datalist id={`${props.name}-list`}>\n            {options?.length && options.map(option => {\n                return ( <option key={option}> {option.toString()} </option> );\n            })}\n        </datalist>\n    );\n\n    return (\n        <FieldWrapper inline={inline} idOrName={props.name} label={label} required={props.required}>\n            <input className={fieldClassName(meta, props.value, validation)} {...field} {...props} list={`${props.name}-list`} />\n            {dataList}\n            <ErrorMessage meta={meta} />\n        </FieldWrapper>\n    );\n}\n\nconst TextArea: FC<TextAreaField> = ({ label, inline=false, validation, ...props }) => {\n    const [field, meta] = useField(props);\n\n    return (\n        <FieldWrapper inline={inline} idOrName={props.name} label={label} required={props.required}>\n            <textarea className={fieldClassName(meta, props.value, validation)} rows={5} {...field} {...props}>\n                {props.value}\n            </textarea>\n            <ErrorMessage meta={meta} />\n        </FieldWrapper>\n    );\n}\n\nexport { Input, Checkbox, Select, DataList, TextArea }","import React, {useMemo, useCallback, useState, useEffect} from \"react\";\n\nimport {useGetCategoriesQuery, useDestroyCategoryMutation} from \"./categorySlice\";\nimport DataTable from \"../../app/table/DataTable\";\nimport {Input} from \"../../app/form/fields\";\nimport {Message} from \"../../app/index\";\n\n\nconst CategoriesSearchForm = () => (\n    <Input name=\"name\" label=\"Name\" type=\"search\" placeholder=\"Enter category name\" inline={true} validation={false} />\n);\n\nexport const CategoriesList = React.memo(() => {\n    const [query, setQuery] = useState(\"\");\n    const [message, setMessage] = useState<Message | null>(null);\n    const result = useGetCategoriesQuery(query);\n    const [destroyCategory] = useDestroyCategoryMutation();\n    const cols = useMemo(() => [\n        { name: \"Name\", accessor: \"name\", link: \"/categories/:id\" },\n        { name: \"Description\", accessor: \"description\" },\n    ], []);\n\n    const categories = (\n        result.isSuccess ? (\n            result.data.categories ? result.data.categories : []\n        ) : null\n    );\n    \n    useEffect(() => {\n        if (result.data?.error) {\n            setMessage({ type: \"danger\", message: result.data.error })\n        }\n    }, [result.data?.error]);\n\n    const handleQuery = useCallback((query: string) => {\n        if (query.length) { setQuery(query) }\n    }, []);\n\n    const destroyChecked = useCallback(async (checked: string[]) => {\n        if (checked.length) {\n            try {\n                const {message, error, invalidData} = await destroyCategory(checked.join()).unwrap();\n                if (message) { setMessage({ type: \"success\", message }) }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            }\n        }\n    }, [destroyCategory]);\n\n    return (\n        <DataTable\n            cols={cols}\n            data={categories}\n            pagination={result.isSuccess && result.data.pagination ? result.data.pagination : { count: 0 }}\n            title=\"Categories\"\n            message={message}\n            setMessage={setMessage}\n            createItemLink=\"/categories/create\"\n            handleQuery={handleQuery}\n            destroyChecked={destroyChecked}\n            searchFormInitialValues={{ name: \"\" }}\n            SearchFormInputs={CategoriesSearchForm}\n        />\n    );\n});","import {isEmpty} from \"../libs/isEmpty\";\nimport {CardProps} from \"./index\";\nimport Alert from \"../alert/Alert\";\n\n\nexport default function FormCard({ title, message, setMessage, cardBody, cardFooter = (<></>) }: CardProps) {\n    return (\n        <div className=\"container-fluid pt-5\">\n            <div className=\"row\">\n                <div className=\"col-md-7 mx-auto col-lg-5\">\n                    { message && !isEmpty(message) && (\n                        <div className=\"pb-1\">\n                            <Alert message={message} setMessage={setMessage} />\n                        </div>\n                    )}\n                    <div className=\"card shadow-lg rounded-0\">\n                        <div className=\"card-header text-white bg-success rounded-0\">\n                            <h4 className=\"text-lg-start\">{title}</h4>\n                            <span className=\"text-danger\"> *</span><span> Required fields</span>\n                        </div>\n\n                        <div className=\"card-body\">{cardBody}</div>\n\n                        { cardFooter && <div className=\"card-footer\">{ cardFooter }</div> }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import * as Yup from \"yup\";\n\nexport const CategorySchema = Yup.object().shape({\n    name: Yup.string()\n        .typeError(\"Product name is required\")\n        .required(\"Product name is required\")\n        .min(2, \"Product name must be at least 2 characters long\")\n        .max(50, \"Product name must not exceed 50 characters\")\n        .matches(/^[aA-zZ\\s]+$/, \"Product name must be alphabetic\"),\n\n    description: Yup.string()\n        .min(5, \"Description should be at least 5 characters long\")\n        .max(255, \"Description should not exceed 255 characters\")\n});\n","import {useEffect, useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {Formik} from \"formik\";\n\nimport {useAddNewCategoryMutation} from \"./categorySlice\";\nimport {Input, TextArea} from \"../../app/form/fields\";\nimport FormCard from \"../../app/card/FormCard\";\nimport ButtonSpinner from \"../../app/spinners/ButtonSpinner\";\nimport {CategorySchema} from \"./CategorySchema\";\nimport {Message} from \"../../app/index\";\nimport {DraftCategory} from \"../api\";\n\n\nexport const AddCategoryForm = () => {\n    const [message, setMessage] = useState<Message | null>(null);\n    const [addNewCategory] = useAddNewCategoryMutation()\n    const history = useHistory();\n    const initialValues: DraftCategory = { name: \"\", description: \"\" }\n\n    useEffect(() => {\n        if (message?.type && message?.message) {\n            window.scrollTo(0, 0);\n        }\n    }, [message?.type, message?.message])\n\n    const form = (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={CategorySchema}\n            onSubmit={async (values, actions) => {\n                if (values.description === \"\") { delete values.description; }\n                try {\n                    const {category, error, invalidData} = await addNewCategory(values).unwrap();\n                    actions.setSubmitting(false);\n                    if (category) {\n                        const message = { type: \"success\", message: \"Category created successfully\" }\n                        history.push({\n                            pathname: \"/categories\",\n                            state: { message }\n                        });\n                    }\n                    if (error) { setMessage({ type: \"danger\", message: error }) }\n                    if (invalidData) {\n                        actions.setErrors(invalidData);\n                        setMessage({ type: \"danger\", message: \"Please correct the errors below\" });\n                    }\n                } catch (error) {\n                    setMessage({ type: \"danger\", message: error.message });\n                }\n            }}\n        >\n            {props => (\n                <>\n                    <form onSubmit={props.handleSubmit}>\n                        <Input name=\"name\" label=\"Name\" type=\"text\" placeholder=\"Enter category name\" required={true} />\n                        <TextArea name=\"description\" label=\"Description\" />\n\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary rounded-0 me-2 mt-3\"\n                            disabled={props.isSubmitting}\n                        >\n                            {props.isSubmitting ? <ButtonSpinner text=\"Adding\" /> : \"Add\"}\n                        </button>\n                    </form>\n                </>\n            )}\n        </Formik>\n    );\n\n    return ( <FormCard title=\"Add Category\" message={message} setMessage={setMessage} cardBody={form} /> )\n}","import {useEffect, useCallback, useState, useMemo} from \"react\";\nimport {useHistory, RouteComponentProps} from \"react-router-dom\";\nimport {Formik} from \"formik\";\n\nimport {useGetCategoryQuery, useEditCategoryMutation, useDestroyCategoryMutation} from \"./categorySlice\";\nimport {Input, TextArea} from \"../../app/form/fields\";\nimport FormCard from \"../../app/card/FormCard\";\nimport Modal from \"../../app/modal/Modal\";\nimport Spinner from \"../../app/spinners/Spinner\";\nimport ButtonSpinner from \"../../app/spinners/ButtonSpinner\";\nimport {CategorySchema} from \"./CategorySchema\";\nimport {Message} from \"../../app/index\";\n\n\ntype TParams = { categoryId: string; };\n\nexport const EditCategoryForm = ({ match }: RouteComponentProps<TParams>) => {\n    const { categoryId } = match.params;\n    const [message, setMessage] = useState<Message | null>(null);\n    const result = useGetCategoryQuery(categoryId);\n    const [updateCategory] = useEditCategoryMutation();\n    const [destroyCategory] = useDestroyCategoryMutation();\n    const initialValues = useMemo(() => {\n        if (result.isSuccess && result.data.category) {\n            const category = {...result.data.category};\n            if (category.description === null) { category.description = \"\" }\n            return category\n        }\n        else { return { name: \"\", description: \"\" } }\n    }, [result.isSuccess, result.data?.category])\n    const history = useHistory();\n\n    useEffect(() => {\n        if (message?.type && message?.message) {\n            window.scrollTo(0, 0);\n        }\n    }, [message?.type, message?.message])\n\n    const handleDestroy = useCallback(async () => {\n        if (categoryId.length) {\n            try {\n                const {message, error, invalidData} = await destroyCategory(categoryId).unwrap();\n                if (message) {\n                    history.push({\n                        pathname: \"/categories\",\n                        state: { message: { type: \"success\", message } }\n                    });\n                }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            }\n        }\n    }, [categoryId, history, destroyCategory]);\n\n    const form = (\n        <Formik\n            enableReinitialize={true}\n            initialValues={initialValues}\n            validationSchema={CategorySchema}\n            onSubmit={async (values, actions) => {\n                if (values.description === \"\") { delete values.description; }\n                try {\n                    const {category, error, invalidData} = await updateCategory(values).unwrap();\n                    actions.setSubmitting(false);\n                    if (category) {\n                        const message = { type: \"success\", message: \"Category updated successfully\" }\n                        history.push({\n                            pathname: \"/categories\",\n                            state: { message }\n                        });\n                    }\n                    if (error) { setMessage({ type: \"danger\", message: error }) }\n                    if (invalidData) {\n                        actions.setErrors(invalidData);\n                        setMessage({ type: \"danger\", message: \"Please correct the errors below\" });\n                    }\n                } catch (error) {\n                    setMessage({ type: \"danger\", message: error.message });\n                }\n            }}\n        >\n            {props => (\n                <>\n                    {result.isFetching ? <Spinner/> : (\n                        <form onSubmit={props.handleSubmit}>\n                            <Input name=\"name\" label=\"Name\" type=\"text\" placeholder=\"Enter category name\" required={true} />\n                            <TextArea name=\"description\" label=\"Description\" />\n\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary rounded-0 me-2 mt-3\"\n                                disabled={props.isSubmitting}\n                            >\n                                {props.isSubmitting ? <ButtonSpinner text=\"Updating\" /> : \"Update\"}\n                            </button>\n\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-danger rounded-0 mt-3\"\n                                data-bs-toggle=\"modal\"\n                                data-bs-target=\"#deleteCategory\"\n                            >\n                                Delete\n                            </button>\n                        </form>\n                    )}\n                </>\n            )}\n        </Formik>\n    );\n\n    return (\n        <>\n            <FormCard title=\"Edit Category\" message={message} setMessage={setMessage} cardBody={form} />\n\n            <Modal\n                id=\"deleteCategory\"\n                label=\"deleteCategoryLabel\"\n                title=\"Delete Category\"\n                body=\"Are you sure you want to delete this category? This action cannot be undone.\"\n                handleAction={handleDestroy}\n            />\n        </>\n    )\n}\n","import {emptySplitApi} from \"../api/apiSlice\";\nimport {Products, ProductState, DraftProduct, Error, FormErrors, Message} from \"../api\";\n\nexport const productApi = emptySplitApi.injectEndpoints({\n    endpoints: (builder) => ({\n        getProducts: builder.query<Products | Error, string | void>({\n            query: (query) => ({\n                url: query && query.length ? `/products${query}`: \"/products\",\n                validateStatus: (response, result) => {\n                    if (result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => {\n                if (result?.products) {\n                    return [\"Product\", ...result.products.map(({ id }) => ({type: \"Product\" as const, id}))]\n                } else {\n                    return [\"Product\"]\n                }\n            }\n        }),\n        getProduct: builder.query<ProductState | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/products/${id}`,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => [{ type: \"Product\", id: arg }]\n        }),\n        addNewProduct: builder.mutation<ProductState | FormErrors | Error, DraftProduct>({\n            query: (category) => ({\n                url: \"/products\",\n                method: \"POST\",\n                body: category,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Product\"]\n        }),\n        editProduct: builder.mutation<ProductState | FormErrors | Error, DraftProduct>({\n            query: (category) => ({\n                url: \"/products\",\n                method: \"PATCH\",\n                body: category,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: (result, error, arg) => [{ type: \"Product\", id: arg.id }]\n        }),\n        destroyProduct: builder.mutation<Message | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/products/${id}`,\n                method: \"DELETE\",\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Product\"]\n        })\n    })\n})\n\nexport const {\n    useGetProductsQuery,\n    useGetProductQuery,\n    useAddNewProductMutation,\n    useEditProductMutation,\n    useDestroyProductMutation,\n} = productApi;","import React, {useMemo, useEffect, useCallback, useState} from \"react\";\n\nimport {useGetProductsQuery, useDestroyProductMutation} from \"./productSlice\";\nimport DataTable from \"../../app/table/DataTable\";\nimport {Input} from \"../../app/form/fields\";\nimport {Message} from \"../../app/index\";\nimport {Category} from \"../api\";\n\n\nconst ProductsSearchForm = () => (\n    <Input name=\"name\" label=\"Name\" type=\"search\" placeholder=\"Enter product name\" inline={true} validation={false} />\n);\n\nexport const ProductsList = React.memo(() => {\n    const [query, setQuery] = useState(\"\");\n    const [message, setMessage] = useState<Message | null>(null);\n    const result = useGetProductsQuery(query);\n    const [destroyProduct] = useDestroyProductMutation();\n    const cols = useMemo(() => [\n        { name: \"Name\", accessor: \"name\", link: \"/products/:id\" },\n        { name: \"Unit cost\", accessor: \"unitCost\" },\n        { name: \"Unit price\", accessor: \"unitPrice\" },\n        { name: \"Store\", accessor: \"store\" },\n        { name: \"Counter\", accessor: \"counter\" },\n        {\n            name: \"Category\",\n            accessor: \"category\",\n            link: \"/category/:categoryId\",\n            callback: (category: Category) => category.name,\n        },\n    ], []);\n\n    const products = (\n        result.isSuccess ? (\n            result.data.products ? result.data.products : []\n        ) : null\n    );\n\n    useEffect(() => {\n        if (result.data?.error) {\n            setMessage({ type: \"danger\", message: result.data.error })\n        }\n    }, [result.data?.error]);\n\n    const handleQuery = useCallback((query: string) => {\n        if (query.length) { setQuery(query) }\n    }, []);\n\n\n    const destroyChecked = useCallback(async (checked: string[]) => {\n        if (checked.length) {\n            try {\n                const {message, error, invalidData} = await destroyProduct(checked.join()).unwrap();\n                if (message) { setMessage({ type: \"success\", message }) }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            }\n        }\n    }, [destroyProduct]);\n\n    return (\n        <DataTable\n            cols={cols}\n            data={products}\n            pagination={result.isSuccess && result.data.pagination ? result.data.pagination : { count: 0 }}\n            title=\"Products\"\n            message={message}\n            setMessage={setMessage}\n            createItemLink=\"/products/create\"\n            handleQuery={handleQuery}\n            destroyChecked={destroyChecked}\n            searchFormInitialValues={{ name: \"\" }}\n            SearchFormInputs={ProductsSearchForm}\n        />\n    );\n});\n","import * as Yup from \"yup\";\n\nexport const ProductSchema = Yup.object().shape({\n    name: Yup.string()\n        .typeError(\"Product name is required\")\n        .required(\"Product name is required\")\n        .min(2, \"Product name must be at least 2 characters long\")\n        .max(50, \"Product name must not exceed 50 characters\"),\n\n    unitCost: Yup.number()\n        .typeError(\"Unit cost must be a number\")\n        .required(\"Unit cost is required\")\n        .positive(\"Unit cost cannot be negative\")\n        .test(\n            \"maxTwoDecimalPoints\",\n            \"Unit price must have at most 2 decimal points\",\n            // @ts-ignore\n            (number) => /^\\d+(\\.\\d{1,2})?$/.test(number)\n        ),\n\n    unitPrice: Yup.number()\n        .typeError(\"Unit price must be a number\")\n        .required(\"Unit price is required\")\n        .positive(\"Unit price cannot be negative\")\n        .test(\n            \"maxTwoDecimalPoints\",\n            \"Unit price must have at most 2 decimal points\",\n            // @ts-ignore\n            (number) => /^\\d+(\\.\\d{1,2})?$/.test(number)\n        ),\n\n    store: Yup.number()\n        .typeError(\"Please provide a valid number for items in store\")\n        .required(\"Number of items in store is required\")\n        .positive(\"Items in store cannot be negative\")\n        .integer(\"Items in store must be an integer\"),\n\n    counter: Yup.number()\n        .typeError(\"Please provide a valid number for items in counter\")\n        .required(\"Number of items in counter is required\")\n        .positive(\"Items in counter cannot be negative\")\n        .integer(\"Items in counter must be an integer\"),\n\n    description: Yup.string()\n        .min(5, \"Description should be at least 5 characters long\")\n        .max(255, \"Description should not exceed 255 characters\")\n});\n","import {useEffect, useState, useMemo} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {Formik} from \"formik\";\n\nimport {useAddNewProductMutation} from \"./productSlice\";\nimport {useGetCategoriesQuery} from \"../category/categorySlice\";\nimport {Input, Select, TextArea} from \"../../app/form/fields\";\nimport FormCard from \"../../app/card/FormCard\";\nimport ButtonSpinner from \"../../app/spinners/ButtonSpinner\";\nimport {ProductSchema} from \"./ProductSchema\";\nimport {Message} from \"../../app/index\";\nimport {Category, DraftProduct} from \"../api\";\n\n\nexport const AddProductForm = () => {\n    const [message, setMessage] = useState<Message | null>(null);\n    const [addNewProduct] = useAddNewProductMutation();\n    const result = useGetCategoriesQuery(\"?limit=all\");\n    const history = useHistory();\n    const initialValues: DraftProduct = {\n        name: \"\", unitCost: \"\", unitPrice: \"\", store: \"\", counter: \"\", description: \"\", categoryId: \"\"\n    }\n    const categories = useMemo(() => {\n        if (result.isSuccess && result.data.categories) {\n            return result.data.categories.map( (category: Category) => ({ value: category.id, label: category.name }))\n        }\n        return [{ value: \"\", label: \"No results found\" }]\n    }, [result.isSuccess, result.data?.categories])\n\n    useEffect(() => {\n        if (message?.type && message?.message) {\n            window.scrollTo(0, 0);\n        }\n    }, [message?.type, message?.message])\n\n    const form = (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={ProductSchema}\n            onSubmit={async (values, actions) => {\n                if (values.description === \"\") { delete values.description; }\n                try {\n                    const {product, error, invalidData} = await addNewProduct(values).unwrap();\n                    actions.setSubmitting(false);\n                    if (product) {\n                        const message = { type: \"success\", message: \"Product created successfully\" }\n                        history.push({\n                            pathname: \"/products\",\n                            state: { message }\n                        });\n                    }\n                    if (error) { setMessage({ type: \"danger\", message: error }) }\n                    if (invalidData) {\n                        actions.setErrors(invalidData);\n                        setMessage({ type: \"danger\", message: \"Please correct the errors below\" });\n                    }\n                } catch (error) {\n                    setMessage({ type: \"danger\", message: error.message });\n                }\n            }}\n        >\n            {props => (\n                <>\n                    <form onSubmit={props.handleSubmit}>\n                        <Input name=\"name\" label=\"Name\" type=\"text\" placeholder=\"Enter product name\" required={true} />\n                        <Input name=\"unitCost\" label=\"Unit cost\" type=\"number\" placeholder=\"Enter product unit cost\" required={true} />\n                        <Input name=\"unitPrice\" label=\"Unit price\" type=\"number\" placeholder=\"Enter product unit price\" required={true} />\n                        <Input name=\"store\" label=\"Store\" type=\"number\" placeholder=\"Enter number of items in store\" required={true} />\n                        <Input name=\"counter\" label=\"Counter\" type=\"number\" placeholder=\"Enter number of items in counter\" required={true} />\n                        <Select name=\"categoryId\" label=\"Select category\" options={categories} required={true}>\n                            <option value=\"\">Select a category</option>\n                        </Select>\n                        <TextArea name=\"description\" label=\"Description\" placeholder=\"Enter a description for the product\" />\n\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary rounded-0 me-2 mt-3\"\n                            disabled={props.isSubmitting}\n                        >\n                            {props.isSubmitting ? <ButtonSpinner text=\"Adding\" /> : \"Add\"}\n                        </button>\n                    </form>\n                </>\n            )}\n        </Formik>\n    );\n\n    return ( <FormCard title=\"Add Product\" message={message} setMessage={setMessage} cardBody={form} /> )\n}\n","import {useState, useEffect, useCallback, useMemo} from \"react\";\nimport {useHistory, RouteComponentProps} from \"react-router-dom\";\nimport {Formik} from \"formik\";\n\nimport {useGetProductQuery, useEditProductMutation, useDestroyProductMutation} from \"./productSlice\";\nimport {useGetCategoriesQuery} from \"../category/categorySlice\";\nimport {Input, Select, TextArea} from \"../../app/form/fields\";\nimport FormCard from \"../../app/card/FormCard\";\nimport Modal from \"../../app/modal/Modal\";\nimport Spinner from \"../../app/spinners/Spinner\";\nimport ButtonSpinner from \"../../app/spinners/ButtonSpinner\";\nimport {ProductSchema} from \"./ProductSchema\";\nimport {Message} from \"../../app/index\";\nimport {Category} from \"../api\";\n\ntype TParams = { productId: string; };\n\nexport const EditProductForm = ({ match }: RouteComponentProps<TParams>) => {\n    const { productId } = match.params;\n    const [message, setMessage] = useState<Message | null>(null);\n    const result = useGetProductQuery(productId);\n    const [updateProduct] = useEditProductMutation();\n    const [destroyProduct] = useDestroyProductMutation();\n    const categoriesResult = useGetCategoriesQuery(\"?limit=all\");\n    const categories = useMemo(() => {\n        if (categoriesResult.isSuccess && categoriesResult.data.categories) {\n            return categoriesResult.data.categories.map( (category: Category) => ({\n                value: category.id, label: category.name\n            }))\n        }\n        return [{ value: \"\", label: \"No results found\" }]\n    }, [categoriesResult.isSuccess, categoriesResult.data?.categories])\n    const initialValues = useMemo(() => {\n        if (result.isSuccess && result.data.product) {\n            const product = {...result.data.product};\n            if (product.description === null) { product.description = \"\" }\n            return product\n        }\n        else {\n            return {\n                name: \"\", unitCost: \"\", unitPrice: \"\", store: \"\", counter: \"\", description: \"\", categoryId: \"\"\n            }\n        }\n    }, [result.isSuccess, result.data?.product])\n    const history = useHistory();\n\n    useEffect(() => {\n        if (message?.type && message?.message) {\n            window.scrollTo(0, 0);\n        }\n    }, [message?.type, message?.message])\n\n\n    const handleDestroy = useCallback(async () => {\n        if (productId.length) {\n            try {\n                const {message, error, invalidData} = await destroyProduct(productId).unwrap();\n                if (message) {\n                    history.push({\n                        pathname: \"/products\",\n                        state: { message: { type: \"success\", message } }\n                    });\n                }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            }\n        }\n    }, [productId, history, destroyProduct])\n\n    const form = (\n        <Formik\n            enableReinitialize={true}\n            initialValues={initialValues}\n            validationSchema={ProductSchema}\n            onSubmit={async (values, actions) => {\n                if (values.description === \"\") { delete values.description; }\n                try {\n                    const {product, error, invalidData} = await updateProduct(values).unwrap();\n                    actions.setSubmitting(false);\n                    if (product) {\n                        const message = { type: \"success\", message: \"Product updated successfully\" }\n                        history.push({\n                            pathname: \"/products\",\n                            state: { message }\n                        });\n                    }\n                    if (error) { setMessage({ type: \"danger\", message: error }) }\n                    if (invalidData) {\n                        actions.setErrors(invalidData);\n                        setMessage({ type: \"danger\", message: \"Please correct the errors below\" });\n                    }\n                } catch (error) {\n                    setMessage({ type: \"danger\", message: error.message });\n                }\n            }}\n        >\n            {props => (\n                <>\n                    {result.isFetching ? <Spinner/> : (\n                        <form onSubmit={props.handleSubmit}>\n                            <Input name=\"name\" label=\"Name\" type=\"text\" placeholder=\"Enter product name\" required={true} />\n                            <Input name=\"unitCost\" label=\"Unit cost\" type=\"number\" placeholder=\"Enter product unit cost\" required={true} />\n                            <Input name=\"unitPrice\" label=\"Unit price\" type=\"number\" placeholder=\"Enter product unit price\" required={true} />\n                            <Input name=\"store\" label=\"Store\" type=\"number\" placeholder=\"Enter number of items in store\" required={true} />\n                            <Input name=\"counter\" label=\"Counter\" type=\"number\" placeholder=\"Enter number of items in counter\" required={true} />\n                            <Select name=\"categoryId\" label=\"Select category\" options={categories} required={true}>\n                                <option value=\"\">Select a category</option>\n                            </Select>\n                            <TextArea name=\"description\" label=\"Description\" />\n\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary rounded-0 me-2 mt-3\"\n                                disabled={props.isSubmitting}\n                            >\n                                {props.isSubmitting ? <ButtonSpinner text=\"Updating\" /> : \"Update\"}\n                            </button>\n\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-danger rounded-0 mt-3\"\n                                data-bs-toggle=\"modal\"\n                                data-bs-target=\"#deleteProduct\"\n                            >\n                                Delete\n                            </button>\n                        </form>\n                    )}\n                </>\n            )}\n        </Formik>\n    );\n\n    return (\n        <>\n            <FormCard title=\"Edit Product\" message={message} setMessage={setMessage} cardBody={form} />\n\n            <Modal\n                id=\"deleteProduct\"\n                label=\"deleteProductLabel\"\n                title=\"Delete Product\"\n                body=\"Are you sure you want to delete this product? This action cannot be undone.\"\n                handleAction={handleDestroy}\n            />\n        </>\n    )\n}\n","import {emptySplitApi} from \"../api/apiSlice\";\nimport {Purchases, PurchaseState, DraftPurchase, Error, FormErrors, Message} from \"../api\";\n\nexport const purchaseApi = emptySplitApi.injectEndpoints({\n    endpoints: (builder) => ({\n        getPurchases: builder.query<Purchases | Error, string | void>({\n            query: (query) => ({\n                url: query && query.length ? `/purchases${query}`: \"/purchases\",\n                validateStatus: (response, result) => {\n                    if (result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => {\n                if (result?.purchases) {\n                    return [\"Purchase\", ...result.purchases.map(({ id }) => ({type: \"Purchase\" as const, id}))]\n                } else {\n                    return [\"Purchase\"]\n                }\n            }\n        }),\n        getPurchase: builder.query<PurchaseState | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/purchases/${id}`,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => [{ type: \"Purchase\", id: arg }]\n        }),\n        addNewPurchase: builder.mutation<PurchaseState | FormErrors | Error, DraftPurchase>({\n            query: (category) => ({\n                url: \"/purchases\",\n                method: \"POST\",\n                body: category,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Purchase\"]\n        }),\n        editPurchase: builder.mutation<PurchaseState | FormErrors | Error, DraftPurchase>({\n            query: (category) => ({\n                url: \"/purchases\",\n                method: \"PATCH\",\n                body: category,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: (result, error, arg) => [{ type: \"Purchase\", id: arg.id }]\n        }),\n        destroyPurchase: builder.mutation<Message | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/purchases/${id}`,\n                method: \"DELETE\",\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Purchase\"]\n        })\n    })\n})\n\nexport const {\n    useGetPurchasesQuery,\n    useGetPurchaseQuery,\n    useAddNewPurchaseMutation,\n    useEditPurchaseMutation,\n    useDestroyPurchaseMutation,\n} = purchaseApi;","import React, {useMemo, useEffect, useCallback, useState} from \"react\";\n\nimport {useGetPurchasesQuery, useDestroyPurchaseMutation} from \"./purchaseSlice\";\nimport DataTable from \"../../app/table/DataTable\";\nimport {Input} from \"../../app/form/fields\";\nimport {Message} from \"../../app/index\";\nimport {Product, Supplier} from \"../api\";\n\n\nconst PurchasesSearchForm = () => (\n    <>\n        <Input name=\"product\" label=\"Product\" type=\"search\"\n               placeholder=\"Enter product name\" inline={true} validation={false} />\n        <Input name=\"supplier\" label=\"Supplier\" type=\"search\"\n               placeholder=\"Enter supplier name\" inline={true} validation={false} />\n    </>\n);\n\nexport const PurchasesList = React.memo(() => {\n    const [query, setQuery] = useState(\"\");\n    const [message, setMessage] = useState<Message | null>(null);\n    const result = useGetPurchasesQuery(query);\n    const [destroyPurchase] = useDestroyPurchaseMutation();\n    const cols = useMemo(() => [\n        {\n            name: \"\",\n            accessor: \"id\",\n            link: \"/purchases/:id\",\n            callback: (id: string) => \"Edit\"\n        },\n        {\n            name: \"Product\",\n            accessor: \"product\",\n            link: \"/products/:productId\",\n            callback: (product: Product) => product.name,\n        },\n        {\n            name: \"Supplier\",\n            accessor: \"supplier\",\n            link: \"/suppliers/:supplierId\",\n            callback: (supplier: Supplier) => supplier.name,\n        },\n        { name: \"Quantity\", accessor: \"quantity\" },\n        { name: \"Unit cost\", accessor: \"unitCost\" },\n        { name: \"Unit price\", accessor: \"unitPrice\" },\n        { name: \"Location\", accessor: \"location\" },\n    ], []);\n\n    const purchases = (\n        result.isSuccess ? (\n            result.data.purchases ? result.data.purchases : []\n        ) : null\n    );\n\n    useEffect(() => {\n        if (result.data?.error) {\n            setMessage({ type: \"danger\", message: result.data.error })\n        }\n    }, [result.data?.error]);\n\n    const handleQuery = useCallback((query: string) => {\n        if (query.length) { setQuery(query) }\n    }, []);\n\n    const destroyChecked = useCallback(async (checked: string[]) => {\n        if (checked.length) {\n            try {\n                const {message, error, invalidData} = await destroyPurchase(checked.join()).unwrap();\n                if (message) { setMessage({ type: \"success\", message }) }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            }\n        }\n    }, [destroyPurchase]);\n\n    return (\n        <DataTable\n            cols={cols}\n            data={purchases}\n            pagination={result.isSuccess && result.data.pagination ? result.data.pagination : { count: 0 }}\n            title=\"Purchases\"\n            message={message}\n            setMessage={setMessage}\n            createItemLink=\"/purchases/create\"\n            handleQuery={handleQuery}\n            destroyChecked={destroyChecked}\n            searchFormInitialValues={{ product: \"\", supplier: \"\" }}\n            SearchFormInputs={PurchasesSearchForm}\n        />\n    );\n});\n","import {emptySplitApi} from \"../api/apiSlice\";\nimport {Suppliers, SupplierState, DraftSupplier, Error, FormErrors, Message} from \"../api\";\n\nexport const supplierApi = emptySplitApi.injectEndpoints({\n    endpoints: (builder) => ({\n        getSuppliers: builder.query<Suppliers | Error, string | void>({\n            query: (query) => ({\n                url: query && query.length ? `/suppliers${query}`: \"/suppliers\",\n                validateStatus: (response, result) => {\n                    if (result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => {\n                if (result?.suppliers) {\n                    return [\"Supplier\", ...result.suppliers.map(({ id }) => ({type: \"Supplier\" as const, id}))]\n                } else {\n                    return [\"Supplier\"]\n                }\n            }\n        }),\n        getSupplier: builder.query<SupplierState | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/suppliers/${id}`,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => [{ type: \"Supplier\", id: arg }]\n        }),\n        addNewSupplier: builder.mutation<SupplierState | FormErrors | Error, DraftSupplier>({\n            query: (category) => ({\n                url: \"/suppliers\",\n                method: \"POST\",\n                body: category,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Supplier\"]\n        }),\n        editSupplier: builder.mutation<SupplierState | FormErrors | Error, DraftSupplier>({\n            query: (category) => ({\n                url: \"/suppliers\",\n                method: \"PATCH\",\n                body: category,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: (result, error, arg) => [{ type: \"Supplier\", id: arg.id }]\n        }),\n        destroySupplier: builder.mutation<Message | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/suppliers/${id}`,\n                method: \"DELETE\",\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Supplier\"]\n        })\n    })\n})\n\nexport const {\n    useGetSuppliersQuery,\n    useGetSupplierQuery,\n    useAddNewSupplierMutation,\n    useEditSupplierMutation,\n    useDestroySupplierMutation,\n} = supplierApi;","import * as Yup from \"yup\";\n\nconst PurchaseSchema = Yup.object({\n    supplierId: Yup.string()\n        .typeError(\"Supplier is required\")\n        .required(\"Supplier is required\"),\n\n    productId: Yup.string()\n        .typeError(\"Product is required\")\n        .required(\"Product is required\"),\n\n    quantity: Yup.number()\n        .typeError(\"Quantity is required\")\n        .required(\"Quantity is required\")\n        .positive(\"Quantity must be greater than 0\")\n        .integer(\"Quantity must be an integer\"),\n\n    unitCost: Yup.number()\n        .typeError(\"Unit cost is required\")\n        .required(\"Unit cost is required\")\n        .positive(\"Unit cost must be greater than 0\")\n        .test(\n            \"maxTwoDecimalPoints\",\n            \"Unit cost must not exceed 2 decimal points\",\n            // @ts-ignore\n            (number) => /^\\d+(\\.\\d{1,2})?$/.test(number)\n        ),\n\n    unitPrice: Yup.number()\n        .typeError(\"Unit price is required\")\n        .required(\"Unit price is required\")\n        .positive(\"Unit price must be greater than 0\")\n        .test(\n            \"maxTwoDecimalPoints\",\n            \"Unit price must not exceed 2 decimal points\",\n            // @ts-ignore\n            (number) => /^\\d+(\\.\\d{1,2})?$/.test(number)\n        )\n        .test(\n            \"notLessThanUnitCost\",\n            \"Unit price cannot be less than unit cost\",\n            function (value) {\n                const unitCost = parseFloat(this.parent.unitCost);\n                if (unitCost) {\n                    // @ts-ignore\n                    return parseFloat(value) >= unitCost;\n                }\n                return true;\n            }\n        ),\n    location: Yup.mixed()\n        .oneOf([\"store\", \"counter\"], \"Valid location are 'store' or 'counter'\"),\n});\n\nexport default PurchaseSchema;","import {useEffect, useState, useMemo} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {Formik} from \"formik\";\n\nimport {useAddNewPurchaseMutation} from \"./purchaseSlice\";\nimport {useGetProductsQuery} from \"../product/productSlice\";\nimport {useGetSuppliersQuery} from \"../supplier/supplierSlice\";\nimport {Input, Select} from \"../../app/form/fields\";\nimport FormCard from \"../../app/card/FormCard\";\nimport ButtonSpinner from \"../../app/spinners/ButtonSpinner\";\nimport PurchaseSchema from \"./PurchaseSchema\";\nimport {Product, Supplier} from \"../api\";\nimport {Message} from \"../../app/index\";\n\n\nexport const AddPurchaseForm = () => {\n    const [message, setMessage] = useState<Message | null>(null);\n    const [addNewPurchase] = useAddNewPurchaseMutation();\n    const allProducts = useGetProductsQuery(\"?limit=all\");\n    const allSuppliers = useGetSuppliersQuery(\"?limit=all\");\n    const products = useMemo(() => {\n        if (allProducts.isSuccess && allProducts.data.products) {\n            return allProducts.data.products.map( (product: Product) => ({ value: product.id, label: product.name }))\n        }\n        return [{ value: \"\", label: \"No results found\" }]\n    }, [allProducts.isSuccess, allProducts.data?.products]);\n    const suppliers = useMemo(() => {\n        if (allSuppliers.isSuccess && allSuppliers.data.suppliers) {\n            return allSuppliers.data.suppliers.map( (supplier: Supplier) => ({ value: supplier.id, label: supplier.name }))\n        }\n        return [{ value: \"\", label: \"No results found\" }]\n    }, [allSuppliers.isSuccess, allSuppliers.data?.suppliers]);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (message?.type && message?.message) {\n            window.scrollTo(0, 0);\n        }\n    }, [message?.type, message?.message])\n\n    const form = (\n        <Formik\n            initialValues={{\n                supplierId: \"\", productId: \"\", quantity: \"\", unitCost: \"\", unitPrice: \"\", location: \"\"\n            }}\n            validationSchema={PurchaseSchema}\n            onSubmit={async (values, actions) => {\n                try {\n                    const {purchase, error, invalidData} = await addNewPurchase(values).unwrap();\n                    actions.setSubmitting(false);\n                    if (purchase) {\n                        const message = { type: \"success\", message: \"Purchase created successfully\" }\n                        history.push({\n                            pathname: \"/purchases\",\n                            state: { message }\n                        });\n                    }\n                    if (error) { setMessage({ type: \"danger\", message: error }) }\n                    if (invalidData) {\n                        actions.setErrors(invalidData);\n                        setMessage({ type: \"danger\", message: \"Please correct the errors below\" });\n                    }\n                } catch (error) {\n                    setMessage({ type: \"danger\", message: error.message });\n                }\n            }}\n        >\n            {props => (\n                <>\n                    <form onSubmit={props.handleSubmit}>\n                        <Select name=\"supplierId\" label=\"Select supplier\" options={suppliers} required={true}>\n                            <option value=\"\">Select a supplier</option>\n                        </Select>\n                        <Select name=\"productId\" label=\"Select product\" options={products} required={true}>\n                            <option value=\"\">Select a product</option>\n                        </Select>\n                        <Input name=\"quantity\" label=\"Quantity\" type=\"number\" placeholder=\"Enter quantity\" required={true} />\n                        <Input name=\"unitCost\" label=\"Unit cost\" type=\"number\" placeholder=\"Enter product unit cost\" required={true} />\n                        <Input name=\"unitPrice\" label=\"Unit price\" type=\"number\" placeholder=\"Enter product unit price\" required={true} />\n                        <Select name=\"location\" label=\"Select location\" required={true}>\n                            <option value=\"\">Select a location</option>\n                            <option value=\"store\">Store</option>\n                            <option value=\"counter\">Counter</option>\n                        </Select>\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary rounded-0 me-2 mt-3\"\n                            disabled={props.isSubmitting}\n                        >\n                            {props.isSubmitting ? <ButtonSpinner text=\"Adding\" /> : \"Add\"}\n                        </button>\n                    </form>\n                </>\n            )}\n        </Formik>\n    );\n\n    return ( <FormCard title=\"Add Purchase\" message={message} setMessage={setMessage} cardBody={form} /> )\n}\n","import {useState, useEffect, useCallback, useMemo} from \"react\";\nimport {useHistory, RouteComponentProps} from \"react-router-dom\";\nimport {Formik} from \"formik\";\n\nimport {useGetPurchaseQuery, useEditPurchaseMutation, useDestroyPurchaseMutation} from \"./purchaseSlice\";\nimport {useGetSuppliersQuery} from \"../supplier/supplierSlice\";\nimport {useGetProductsQuery} from \"../product/productSlice\";\nimport {Input, Select} from \"../../app/form/fields\";\nimport FormCard from \"../../app/card/FormCard\";\nimport Modal from \"../../app/modal/Modal\";\nimport Spinner from \"../../app/spinners/Spinner\";\nimport ButtonSpinner from \"../../app/spinners/ButtonSpinner\";\nimport PurchaseSchema from \"./PurchaseSchema\";\nimport {Message} from \"../../app/index\";\nimport {Product, Supplier} from \"../api\";\n\n\ntype TParams = { purchaseId: string; };\n\n\nexport const EditPurchaseForm = ({ match }: RouteComponentProps<TParams>) => {\n    const { purchaseId } = match.params;\n    const [message, setMessage] = useState<Message | null>(null);\n    const result = useGetPurchaseQuery(purchaseId);\n    const [updatePurchase] = useEditPurchaseMutation();\n    const [destroyPurchase] = useDestroyPurchaseMutation();\n    const allProducts = useGetProductsQuery(\"?limit=all\");\n    const allSuppliers = useGetSuppliersQuery(\"?limit=all\");\n    const products = useMemo(() => {\n        if (allProducts.isSuccess && allProducts.data.products) {\n            return allProducts.data.products.map( (product: Product) => ({ value: product.id, label: product.name }))\n        }\n        return [{ value: \"\", label: \"No results found\" }]\n    }, [allProducts.isSuccess, allProducts.data?.products]);\n    const suppliers = useMemo(() => {\n        if (allSuppliers.isSuccess && allSuppliers.data.suppliers) {\n            return allSuppliers.data.suppliers.map( (supplier: Supplier) => ({ value: supplier.id, label: supplier.name }))\n        }\n        return [{ value: \"\", label: \"No results found\" }]\n    }, [allSuppliers.isSuccess, allSuppliers.data?.suppliers]);\n    const initialValues = useMemo(() => {\n        if (result.isSuccess && result.data.purchase) {\n            return {...result.data.purchase};\n        }\n        else {\n            return { supplierId: \"\", productId: \"\", quantity: \"\", unitCost: \"\", unitPrice: \"\", location: \"\" }\n        }\n    }, [result.isSuccess, result.data?.purchase])\n    const history = useHistory();\n\n    useEffect(() => {\n        if (message?.type && message?.message) {\n            window.scrollTo(0, 0);\n        }\n    }, [message?.type, message?.message])\n\n    const handleDestroy = useCallback(async () => {\n        if (purchaseId.length) {\n            try {\n                const {message, error, invalidData} = await destroyPurchase(purchaseId).unwrap();\n                if (message) {\n                    history.push({\n                        pathname: \"/purchases\",\n                        state: { message: { type: \"success\", message } }\n                    });\n                }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            }\n        }\n    }, [purchaseId, history, destroyPurchase])\n\n    const form = (\n        <Formik\n            enableReinitialize={true}\n            initialValues={initialValues}\n            validationSchema={PurchaseSchema}\n            onSubmit={async (values, actions) => {\n                try {\n                    const {purchase, error, invalidData} = await updatePurchase(values).unwrap();\n                    actions.setSubmitting(false);\n                    if (purchase) {\n                        const message = { type: \"success\", message: \"Purchase updated successfully\" }\n                        history.push({\n                            pathname: \"/purchases\",\n                            state: { message }\n                        });\n                    }\n                    if (error) { setMessage({ type: \"danger\", message: error }) }\n                    if (invalidData) {\n                        actions.setErrors(invalidData);\n                        setMessage({ type: \"danger\", message: \"Please correct the errors below\" });\n                    }\n                } catch (error) {\n                    setMessage({ type: \"danger\", message: error.message });\n                }\n            }}\n        >\n            {props => (\n                <>\n                    {result.isFetching ? <Spinner/> : (\n                        <form onSubmit={props.handleSubmit}>\n                            <Select name=\"supplierId\" label=\"Select supplier\" options={suppliers} required={true}>\n                                <option value=\"\">Select a supplier</option>\n                            </Select>\n                            <Select name=\"productId\" label=\"Select product\" options={products} required={true}>\n                                <option value=\"\">Select a product</option>\n                            </Select>\n                            <Input name=\"quantity\" label=\"Quantity\" type=\"number\" placeholder=\"Enter quantity\" required={true} />\n                            <Input name=\"unitCost\" label=\"Unit cost\" type=\"number\" placeholder=\"Enter product unit cost\" required={true} />\n                            <Input name=\"unitPrice\" label=\"Unit price\" type=\"number\" placeholder=\"Enter product unit price\" required={true} />\n                            <Select name=\"location\" label=\"Select location\" required={true}>\n                                <option value=\"\">Select a location</option>\n                                <option value=\"store\">Store</option>\n                                <option value=\"counter\">Counter</option>\n                            </Select>\n\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary rounded-0 me-2 mt-3\"\n                                disabled={props.isSubmitting}\n                            >\n                                {props.isSubmitting ? <ButtonSpinner text=\"Updating\" /> : \"Update\"}\n                            </button>\n\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-danger rounded-0 mt-3\"\n                                data-bs-toggle=\"modal\"\n                                data-bs-target=\"#deletePurchase\"\n                            >\n                                Delete\n                            </button>\n                        </form>\n                    )}\n                </>\n            )}\n        </Formik>\n    );\n\n    return (\n        <>\n            <FormCard title=\"Edit Purchase\" message={message} setMessage={setMessage} cardBody={form} />\n\n            <Modal\n                id=\"deletePurchase\"\n                label=\"deletePurchaseLabel\"\n                title=\"Delete Purchase\"\n                body=\"Are you sure you want to delete this purchase? This action cannot be undone.\"\n                handleAction={handleDestroy}\n            />\n        </>\n    )\n}\n","import {emptySplitApi} from \"../api/apiSlice\";\nimport {Sales, SaleState, DraftSale, Error, FormErrors, Message} from \"../api\";\n\nexport const saleApi = emptySplitApi.injectEndpoints({\n    endpoints: (builder) => ({\n        getSales: builder.query<Sales | Error, string | void>({\n            query: (query) => ({\n                url: query && query.length ? `/sales${query}`: \"/sales\",\n                validateStatus: (response, result) => {\n                    if (result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => {\n                if (result?.sales) {\n                    return [\"Sale\", ...result.sales.map(({ id }) => ({type: \"Sale\" as const, id}))]\n                } else {\n                    return [\"Sale\"]\n                }\n            }\n        }),\n        getSale: builder.query<SaleState | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/sales/${id}`,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => [{ type: \"Sale\", id: arg }]\n        }),\n        addNewSale: builder.mutation<SaleState | FormErrors | Error, DraftSale>({\n            query: (category) => ({\n                url: \"/sales\",\n                method: \"POST\",\n                body: category,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Sale\"]\n        }),\n        editSale: builder.mutation<SaleState | FormErrors | Error, DraftSale>({\n            query: (category) => ({\n                url: \"/sales\",\n                method: \"PATCH\",\n                body: category,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: (result, error, arg) => [{ type: \"Sale\", id: arg.id }]\n        }),\n        cancelSale: builder.mutation<Message | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/sales/${id}/cancel`,\n                method: \"DELETE\",\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Sale\"]\n        }),\n        destroySale: builder.mutation<Message | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/sales/${id}`,\n                method: \"DELETE\",\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Sale\"]\n        })\n    })\n})\n\nexport const {\n    useGetSalesQuery,\n    useGetSaleQuery,\n    useAddNewSaleMutation,\n    useEditSaleMutation,\n    useCancelSaleMutation,\n    useDestroySaleMutation,\n} = saleApi;","import React, {useMemo, useEffect, useCallback, useState} from \"react\";\n\nimport {useGetSalesQuery, useDestroySaleMutation} from \"./salesSlice\";\nimport DataTable from \"../../app/table/DataTable\";\nimport {Input} from \"../../app/form/fields\";\nimport {Message} from \"../../app/index\";\nimport {Product} from \"../api\";\n\n\nconst SalesSearchForm = () => (\n    <Input name=\"product\" label=\"Product\" type=\"search\"\n           placeholder=\"Enter product name\" inline={true} validation={false} />\n);\n\nexport const SalesList = React.memo(() => {\n    const [query, setQuery] = useState(\"\");\n    const [message, setMessage] = useState<Message | null>(null);\n    const result = useGetSalesQuery(query);\n    const [destroySale] = useDestroySaleMutation();\n    const cols = useMemo(() => [\n        {\n            name: \"\",\n            accessor: \"id\",\n            link: \"/sales/:id\",\n            callback: (id: string) => \"Edit\"\n        },\n        {\n            name: \"Product\",\n            accessor: \"product\",\n            link: \"/products/:productId\",\n            callback: (product: Product) => product.name,\n        },\n        { name: \"Quantity\", accessor: \"quantity\" },\n    ], []);\n    \n    const sales = (\n        result.isSuccess ? (\n            result.data.sales ? result.data.sales : []\n        ) : null\n    );\n\n    useEffect(() => {\n        if (result.data?.error) {\n            setMessage({ type: \"danger\", message: result.data.error })\n        }\n    }, [result.data?.error]);\n\n    const handleQuery = useCallback((query: string) => {\n        if (query.length) { setQuery(query) }\n    }, []);\n\n    const destroyChecked = useCallback(async (checked: string[]) => {\n        if (checked.length) {\n            try {\n                const {message, error, invalidData} = await destroySale(checked.join()).unwrap();\n                if (message) { setMessage({ type: \"success\", message }) }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            }\n        }\n    }, [destroySale]);\n\n    return (\n        <DataTable\n            cols={cols}\n            data={sales}\n            pagination={result.isSuccess && result.data.pagination ? result.data.pagination : { count: 0 }}\n            title=\"Sales\"\n            message={message}\n            setMessage={setMessage}\n            createItemLink=\"/sales/create\"\n            handleQuery={handleQuery}\n            destroyChecked={destroyChecked}\n            searchFormInitialValues={{ product: \"\" }}\n            SearchFormInputs={SalesSearchForm}\n        />\n    );\n});\n","import * as Yup from \"yup\";\n\nconst SaleSchema = Yup.object({\n    productId: Yup.string()\n        .typeError(\"Product is required\")\n        .required(\"Product is required\"),\n\n    quantity: Yup.number()\n        .typeError(\"Please provide a valid quantity\")\n        .required(\"Quantity is required\")\n        .positive(\"Quantity cannot be negative\")\n        .integer(\"Quantity must be an integer\"),\n});\n\nexport default SaleSchema;","import {useEffect, useMemo, useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {Formik} from \"formik\";\n\nimport {useAddNewSaleMutation} from \"./salesSlice\";\nimport {useGetProductsQuery} from \"../product/productSlice\";\nimport {Input, Select} from \"../../app/form/fields\";\nimport FormCard from \"../../app/card/FormCard\";\nimport ButtonSpinner from \"../../app/spinners/ButtonSpinner\";\nimport SaleSchema from \"./SaleSchema\";\nimport {Product} from \"../api\";\nimport {Message} from \"../../app/index\";\n\n\nexport const AddSaleForm = () => {\n    const [message, setMessage] = useState<Message | null>(null);\n    const [addNewSale] = useAddNewSaleMutation();\n    const allProducts = useGetProductsQuery(\"?limit=all\");\n    const products = useMemo(() => {\n        if (allProducts.isSuccess && allProducts.data.products) {\n            return allProducts.data.products.map( (product: Product) => ({ value: product.id, label: product.name }))\n        }\n        return [{ value: \"\", label: \"No results found\" }]\n    }, [allProducts.isSuccess, allProducts.data?.products]);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (message?.type && message?.message) {\n            window.scrollTo(0, 0);\n        }\n    }, [message?.type, message?.message])\n\n    const form = (\n        <Formik\n            initialValues={{ productId: \"\", quantity: \"\" }}\n            validationSchema={SaleSchema}\n            onSubmit={async (values, actions) => {\n                try {\n                    const {sale, error, invalidData} = await addNewSale(values).unwrap();\n                    actions.setSubmitting(false);\n                    if (sale) {\n                        const message = { type: \"success\", message: \"Sale created successfully\" }\n                        history.push({\n                            pathname: \"/sales\",\n                            state: { message }\n                        });\n                    }\n                    if (error) { setMessage({ type: \"danger\", message: error }) }\n                    if (invalidData) {\n                        actions.setErrors(invalidData);\n                        setMessage({ type: \"danger\", message: \"Please correct the errors below\" });\n                    }\n                } catch (error) {\n                    setMessage({ type: \"danger\", message: error.message });\n                }\n            }}\n        >\n            {props => (\n                <>\n                    <form onSubmit={props.handleSubmit}>\n                        <Select name=\"productId\" label=\"Select product\" options={products} required={true}>\n                            <option value=\"\">Select a product</option>\n                        </Select>\n                        <Input name=\"quantity\" label=\"Quantity\" type=\"number\" placeholder=\"Enter quantity\" required={true} />\n\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary rounded-0 me-2 mt-3\"\n                            disabled={props.isSubmitting}\n                        >\n                            {props.isSubmitting ? <ButtonSpinner text=\"Adding\" /> : \"Add\"}\n                        </button>\n                    </form>\n                </>\n            )}\n        </Formik>\n    );\n\n    return ( <FormCard title=\"Add Sale\" message={message} setMessage={setMessage} cardBody={form} /> )\n}\n","import {useState, useEffect, useCallback, useMemo} from \"react\";\nimport {useHistory, RouteComponentProps} from \"react-router-dom\";\nimport {Formik} from \"formik\";\n\nimport {useGetSaleQuery, useEditSaleMutation, useCancelSaleMutation, useDestroySaleMutation} from \"./salesSlice\";\nimport {useGetProductsQuery} from \"../product/productSlice\";\nimport {Input, Select} from \"../../app/form/fields\";\nimport FormCard from \"../../app/card/FormCard\";\nimport Modal from \"../../app/modal/Modal\";\nimport Spinner from \"../../app/spinners/Spinner\";\nimport ButtonSpinner from \"../../app/spinners/ButtonSpinner\";\nimport SaleSchema from \"./SaleSchema\";\nimport {Message} from \"../../app/index\";\nimport {Product} from \"../api\";\n\n\ntype TParams = { saleId: string; };\n\n\nexport const EditSaleForm = ({ match }: RouteComponentProps<TParams>) => {\n    const { saleId } = match.params;\n    const [message, setMessage] = useState<Message | null>(null);\n    const result = useGetSaleQuery(saleId);\n    const [updateSale] = useEditSaleMutation();\n    const [cancelSale] = useCancelSaleMutation();\n    const [destroySale] = useDestroySaleMutation();\n    const allProducts = useGetProductsQuery(\"?limit=all\");\n    const products = useMemo(() => {\n        if (allProducts.isSuccess && allProducts.data.products) {\n            return allProducts.data.products.map( (product: Product) => ({ value: product.id, label: product.name }))\n        }\n        return [{ value: \"\", label: \"No results found\" }]\n    }, [allProducts.isSuccess, allProducts.data?.products]);\n    const initialValues = useMemo(() => {\n        if (result.isSuccess && result.data.sale) {\n            return {...result.data.sale};\n        }\n        else {\n            return { productId: \"\", quantity: \"\" }\n        }\n    }, [result.isSuccess, result.data?.sale])\n    const history = useHistory();\n\n    useEffect(() => {\n        if (message?.type && message?.message) {\n            window.scrollTo(0, 0);\n        }\n    }, [message?.type, message?.message])\n\n    const handleDestroy = useCallback(async () => {\n        if (saleId.length) {\n            try {\n                const {message, error, invalidData} = await destroySale(saleId).unwrap();\n                if (message) {\n                    history.push({\n                        pathname: \"/sales\",\n                        state: { message: { type: \"success\", message } }\n                    });\n                }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            }\n        }\n    }, [saleId, history, destroySale])\n\n    const handleCancel = useCallback(async () => {\n        if (saleId.length) {\n            try {\n                const {message, error, invalidData} = await cancelSale(saleId).unwrap();\n                if (message) {\n                    history.push({\n                        pathname: \"/sales\",\n                        state: { message: { type: \"success\", message } }\n                    });\n                }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            };\n        }\n    }, [saleId, history, cancelSale])\n\n    const form = (\n        <Formik\n            enableReinitialize={true}\n            initialValues={initialValues}\n            validationSchema={SaleSchema}\n            onSubmit={async (values, actions) => {\n                try {\n                    const {sale, error, invalidData} = await updateSale(values).unwrap();\n                    actions.setSubmitting(false);\n                    if (sale) {\n                        const message = { type: \"success\", message: \"Sale updated successfully\" }\n                        history.push({\n                            pathname: \"/sales\",\n                            state: { message }\n                        });\n                    }\n                    if (error) { setMessage({ type: \"danger\", message: error }) }\n                    if (invalidData) {\n                        actions.setErrors(invalidData);\n                        setMessage({ type: \"danger\", message: \"Please correct the errors below\" });\n                    }\n                } catch (error) {\n                    setMessage({ type: \"danger\", message: error.message });\n                }\n            }}\n        >\n            {props => (\n                <>\n                    {result.isFetching ? <Spinner/> : (\n                        <form onSubmit={props.handleSubmit}>\n                            <Select name=\"productId\" label=\"Select product\" options={products} required={true}>\n                                <option value=\"\">Select a product</option>\n                            </Select>\n                            <Input name=\"quantity\" label=\"Quantity\" type=\"number\" placeholder=\"Enter quantity\" required={true} />\n\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary rounded-0 me-2 mt-3\"\n                                disabled={props.isSubmitting}\n                            >\n                                {props.isSubmitting ? <ButtonSpinner text=\"Updating\" /> : \"Update\"}\n                            </button>\n\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-danger rounded-0 me-2 mt-3\"\n                                data-bs-toggle=\"modal\"\n                                data-bs-target=\"#cancelSale\"\n                            >\n                                Cancel\n                            </button>\n\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-danger rounded-0 mt-3\"\n                                data-bs-toggle=\"modal\"\n                                data-bs-target=\"#deleteSale\"\n                            >\n                                Delete\n                            </button>\n                        </form>\n                    )}\n                </>\n            )}\n        </Formik>\n    );\n\n    return (\n        <>\n            <FormCard title=\"Edit Sale\" message={message} setMessage={setMessage} cardBody={form} />\n\n            <Modal\n                id=\"deleteSale\"\n                label=\"deleteSaleLabel\"\n                title=\"Delete Sale\"\n                body=\"Are you sure you want to delete this sale? This action cannot be undone.\"\n                handleAction={handleDestroy}\n            />\n\n            <Modal\n                id=\"cancelSale\"\n                label=\"cancelSaleLabel\"\n                title=\"Cancel Sale\"\n                body=\"Are you sure you want to cancel this sale? This action cannot be undone.\"\n                handleAction={handleCancel}\n                actionLabel=\"Cancel\"\n            />\n        </>\n    )\n}\n","import React, {useMemo, useEffect, useCallback, useState} from \"react\";\n\nimport {useGetSuppliersQuery, useDestroySupplierMutation} from \"./supplierSlice\";\nimport DataTable from \"../../app/table/DataTable\";\nimport {Input} from \"../../app/form/fields\";\nimport {Message} from \"../../app/index\";\n\n\nconst SuppliersSearchForm = () => (\n    <Input name=\"name\" label=\"Name\" type=\"search\"\n           placeholder=\"Enter supplier name\" inline={true} validation={false} />\n);\n\nexport const SuppliersList = React.memo(() => {\n    const [query, setQuery] = useState(\"\");\n    const [message, setMessage] = useState<Message | null>(null);\n    const result = useGetSuppliersQuery(query);\n    const [destroySupplier] = useDestroySupplierMutation();\n    const cols = useMemo(() => [\n        { name: \"Name\", accessor: \"name\", link: \"/suppliers/:id\" },\n        { name: \"Phone\", accessor: \"phone\" },\n        { name: \"Email\", accessor: \"email\" },\n    ], []);\n\n    const suppliers = (\n        result.isSuccess ? (\n            result.data.suppliers ? result.data.suppliers : []\n        ) : null\n    );\n\n    useEffect(() => {\n        if (result.data?.error) {\n            setMessage({ type: \"danger\", message: result.data.error })\n        }\n    }, [result.data?.error]);\n\n    const handleQuery = useCallback((query: string) => {\n        if (query.length) { setQuery(query) }\n    }, []);\n\n    const destroyChecked = useCallback(async (checked: string[]) => {\n        if (checked.length) {\n            try {\n                const {message, error, invalidData} = await destroySupplier(checked.join()).unwrap();\n                if (message) { setMessage({ type: \"success\", message }) }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            }\n        }\n    }, [destroySupplier]);\n\n    return (\n        <DataTable\n            cols={cols}\n            data={suppliers}\n            pagination={result.isSuccess && result.data.pagination ? result.data.pagination : { count: 0 }}\n            title=\"Suppliers\"\n            message={message}\n            setMessage={setMessage}\n            createItemLink=\"/suppliers/create\"\n            handleQuery={handleQuery}\n            destroyChecked={destroyChecked}\n            searchFormInitialValues={{ name: \"\" }}\n            SearchFormInputs={SuppliersSearchForm}\n        />\n    );\n});\n","import * as Yup from \"yup\";\n\nconst SupplierSchema = Yup.object({\n    name: Yup.string()\n        .typeError(\"Supplier name is required\")\n        .required(\"Supplier name is required\")\n        .min(2, \"Supplier name must be at least 2 characters long\")\n        .max(50, \"Supplier name must not exceed 20 characters\")\n        .matches(/^[aA-zZ\\s]+$/, \"Supplier name must be alphabetic\"),\n\n    phone: Yup.string()\n        .typeError(\"Phone number is required\")\n        .required(\"Phone number is required\")\n        .min(10, \"Phone number must be 10 characters long\")\n        .max(10, \"Phone number must be 10 characters long\"),\n\n    email: Yup.string()\n        .email(\"Please provide a valid email address\"),\n});\n\nexport default SupplierSchema;","import {useEffect, useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {Formik} from \"formik\";\n\nimport {useAddNewSupplierMutation} from \"./supplierSlice\";\nimport {Input} from \"../../app/form/fields\";\nimport FormCard from \"../../app/card/FormCard\";\nimport ButtonSpinner from \"../../app/spinners/ButtonSpinner\";\nimport SupplierSchema from \"./SupplierSchema\";\nimport {Message} from \"../../app/index\";\nimport {DraftSupplier} from \"../api\";\n\n\nexport const AddSupplierForm = () => {\n    const [message, setMessage] = useState<Message | null>(null);\n    const [addNewSupplier] = useAddNewSupplierMutation();\n    const history = useHistory();\n    const initialValues: DraftSupplier = { name: \"\", phone: \"\", email: \"\" }\n\n    useEffect(() => {\n        if (message?.type && message?.message) {\n            window.scrollTo(0, 0);\n        }\n    }, [message?.type, message?.message])\n\n    const form = (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={SupplierSchema}\n            onSubmit={async (values, actions) => {\n                if (values.email === \"\") { delete values.email; }\n                try {\n                    const {supplier, error, invalidData} = await addNewSupplier(values).unwrap();\n                    actions.setSubmitting(false);\n                    if (supplier) {\n                        const message = { type: \"success\", message: \"Supplier created successfully\" }\n                        history.push({\n                            pathname: \"/suppliers\",\n                            state: { message }\n                        });\n                    }\n                    if (error) { setMessage({ type: \"danger\", message: error }) }\n                    if (invalidData) {\n                        actions.setErrors(invalidData);\n                        setMessage({ type: \"danger\", message: \"Please correct the errors below\" });\n                    }\n                } catch (error) {\n                    setMessage({ type: \"danger\", message: error.message });\n                }\n            }}\n        >\n            {props => (\n                <>\n                    <form onSubmit={props.handleSubmit}>\n                        <Input name=\"name\" label=\"Name\" type=\"text\" placeholder=\"Enter supplier's name\" required={true} />\n                        <Input name=\"phone\" label=\"Phone\" type=\"text\" placeholder=\"Enter supplier's phone number\" required={true} />\n                        <Input name=\"email\" label=\"Email\" type=\"email\" placeholder=\"Enter supplier's email\" />\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary rounded-0 me-2 mt-3\"\n                            disabled={props.isSubmitting}\n                        >\n                            {props.isSubmitting ? <ButtonSpinner text=\"Adding\" /> : \"Add\"}\n                        </button>\n                    </form>\n                </>\n            )}\n        </Formik>\n    );\n\n    return ( <FormCard title=\"Add Supplier\" message={message} setMessage={setMessage} cardBody={form} /> )\n}\n","import {useState, useEffect, useCallback, useMemo} from \"react\";\nimport {useHistory, RouteComponentProps} from \"react-router-dom\";\nimport {Formik} from \"formik\";\n\nimport {useGetSupplierQuery, useEditSupplierMutation, useDestroySupplierMutation} from \"./supplierSlice\";\nimport {Input} from \"../../app/form/fields\";\nimport FormCard from \"../../app/card/FormCard\";\nimport Modal from \"../../app/modal/Modal\";\nimport Spinner from \"../../app/spinners/Spinner\";\nimport ButtonSpinner from \"../../app/spinners/ButtonSpinner\";\nimport SupplierSchema from \"./SupplierSchema\";\nimport {Message} from \"../../app/index\";\n\n\ntype TParams = { supplierId: string; };\n\n\nexport const EditSupplierForm = ({ match }: RouteComponentProps<TParams>) => {\n    const { supplierId } = match.params;\n    const [message, setMessage] = useState<Message | null>(null);\n    const result = useGetSupplierQuery(supplierId);\n    const [updateSupplier] = useEditSupplierMutation();\n    const [destroySupplier] = useDestroySupplierMutation();\n    const initialValues = useMemo(() => {\n        if (result.isSuccess && result.data.supplier) {\n            return {...result.data.supplier};\n        }\n        else {\n            return { name: \"\", phone: \"\", email: \"\" }\n        }\n    }, [result.isSuccess, result.data?.supplier])\n    const history = useHistory();\n\n    useEffect(() => {\n        if (message?.type && message?.message) {\n            window.scrollTo(0, 0);\n        }\n    }, [message?.type, message?.message])\n\n    const handleDestroy = useCallback(async () => {\n        if (supplierId.length) {\n            try {\n                const {message, error, invalidData} = await destroySupplier(supplierId).unwrap();\n                if (message) {\n                    history.push({\n                        pathname: \"/suppliers\",\n                        state: { message: { type: \"success\", message } }\n                    });\n                }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            }\n        }\n    }, [supplierId, history, destroySupplier])\n\n    const form = (\n        <Formik\n            enableReinitialize={true}\n            initialValues={initialValues}\n            validationSchema={SupplierSchema}\n            onSubmit={async (values, actions) => {\n                if (values.email === \"\") { delete values.email; }\n                try {\n                    const {supplier, error, invalidData} = await updateSupplier(values).unwrap();\n                    actions.setSubmitting(false);\n                    if (supplier) {\n                        const message = { type: \"success\", message: \"Supplier updated successfully\" }\n                        history.push({\n                            pathname: \"/suppliers\",\n                            state: { message }\n                        });\n                    }\n                    if (error) { setMessage({ type: \"danger\", message: error }) }\n                    if (invalidData) {\n                        actions.setErrors(invalidData);\n                        setMessage({ type: \"danger\", message: \"Please correct the errors below\" });\n                    }\n                } catch (error) {\n                    setMessage({ type: \"danger\", message: error.message });\n                }\n            }}\n        >\n            {props => (\n                <>\n                    {result.isFetching ? <Spinner/> : (\n                        <form onSubmit={props.handleSubmit}>\n                            <Input name=\"name\" label=\"Name\" type=\"text\" placeholder=\"Enter supplier's name\" required={true} />\n                            <Input name=\"phone\" label=\"Phone\" type=\"text\" placeholder=\"Enter supplier's phone number\" required={true} />\n                            <Input name=\"email\" label=\"Email\" type=\"email\" placeholder=\"Enter supplier's email\" />\n\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary rounded-0 me-2 mt-3\"\n                                disabled={props.isSubmitting}\n                            >\n                                {props.isSubmitting ? <ButtonSpinner text=\"Updating\" /> : \"Update\"}\n                            </button>\n\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-danger rounded-0 mt-3\"\n                                data-bs-toggle=\"modal\"\n                                data-bs-target=\"#deleteSupplier\"\n                            >\n                                Delete\n                            </button>\n                        </form>\n                    )}\n                </>\n            )}\n        </Formik>\n    );\n\n    return (\n        <>\n            <FormCard title=\"Edit Supplier\" message={message} setMessage={setMessage} cardBody={form} />\n\n            <Modal\n                id=\"deleteSupplier\"\n                label=\"deleteSupplierLabel\"\n                title=\"Delete Supplier\"\n                body=\"Are you sure you want to delete this supplier? This action cannot be undone.\"\n                handleAction={handleDestroy}\n            />\n        </>\n    )\n}\n","import {emptySplitApi} from \"../api/apiSlice\";\nimport {Transfers, TransferState, DraftTransfer, Error, FormErrors, Message} from \"../api\";\n\nexport const transferApi = emptySplitApi.injectEndpoints({\n    endpoints: (builder) => ({\n        getTransfers: builder.query<Transfers | Error, string | void>({\n            query: (query) => ({\n                url: query && query.length ? `/transfers${query}`: \"/transfers\",\n                validateStatus: (response, result) => {\n                    if (result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => {\n                if (result?.transfers) {\n                    return [\"Transfer\", ...result.transfers.map(({ id }) => ({type: \"Transfer\" as const, id}))]\n                } else {\n                    return [\"Transfer\"]\n                }\n            }\n        }),\n        getTransfer: builder.query<TransferState | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/transfers/${id}`,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            providesTags: (result, error, arg) => [{ type: \"Transfer\", id: arg }]\n        }),\n        addNewTransfer: builder.mutation<TransferState | FormErrors | Error, DraftTransfer>({\n            query: (category) => ({\n                url: \"/transfers\",\n                method: \"POST\",\n                body: category,\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Transfer\"]\n        }),\n        destroyTransfer: builder.mutation<Message | FormErrors | Error, string>({\n            query: (id) => ({\n                url: `/transfers/${id}`,\n                method: \"DELETE\",\n                validateStatus: (response, result) => {\n                    if (result?.invalidData || result?.error) { return true }\n                    return response.ok;\n                },\n            }),\n            invalidatesTags: [\"Transfer\"]\n        })\n    })\n})\n\nexport const {\n    useGetTransfersQuery,\n    useGetTransferQuery,\n    useAddNewTransferMutation,\n    useDestroyTransferMutation,\n} = transferApi;","import React, {useMemo, useEffect, useCallback, useState} from \"react\";\n\nimport {useGetTransfersQuery, useDestroyTransferMutation} from \"./transferSlice\";\nimport DataTable from \"../../app/table/DataTable\";\nimport {Input} from \"../../app/form/fields\";\nimport {Message} from \"../../app/index\";\nimport {Product} from \"../api\";\n\n\nconst TransfersSearchForm = () => (\n    <Input name=\"product\" label=\"Product\" type=\"search\"\n           placeholder=\"Enter product name\" inline={true} validation={false} />\n);\n\nexport const TransfersList = React.memo(() => {\n    const [query, setQuery] = useState(\"\");\n    const [message, setMessage] = useState<Message | null>(null);\n    const result = useGetTransfersQuery(query);\n    const [destroyTransfer] = useDestroyTransferMutation();\n    const cols = useMemo(() => [\n        {\n            name: \"Product\",\n            accessor: \"product\",\n            link: \"/products/:productId\",\n            callback: (product: Product) => product.name,\n        },\n        { name: \"Quantity\", accessor: \"quantity\" },\n        { name: \"Source\", accessor: \"source\" },\n        { name: \"Destination\", accessor: \"destination\" },\n    ], []);\n\n    const transfers = (\n        result.isSuccess ? (\n            result.data.transfers ? result.data.transfers : []\n        ) : null\n    );\n\n    useEffect(() => {\n        if (result.data?.error) {\n            setMessage({ type: \"danger\", message: result.data.error })\n        }\n    }, [result.data?.error]);\n\n    const handleQuery = useCallback((query: string) => {\n        if (query.length) { setQuery(query) }\n    }, []);\n\n    const destroyChecked = useCallback(async (checked: string[]) => {\n        if (checked.length) {\n            try {\n                const {message, error, invalidData} = await destroyTransfer(checked.join()).unwrap();\n                if (message) { setMessage({ type: \"success\", message }) }\n                if (error) { setMessage({ type: \"danger\", message: error }) }\n                if (invalidData) { setMessage({ type: \"danger\", message: invalidData.id }) }\n            } catch (error) {\n                setMessage({ type: \"danger\", message: error.message });\n            }\n        }\n    }, [destroyTransfer]);\n\n    return (\n        <DataTable\n            cols={cols}\n            data={transfers}\n            pagination={result.isSuccess && result.data.pagination ? result.data.pagination : { count: 0 }}\n            title=\"Transfers\"\n            message={message}\n            setMessage={setMessage}\n            createItemLink=\"/transfers/create\"\n            handleQuery={handleQuery}\n            destroyChecked={destroyChecked}\n            searchFormInitialValues={{ product: \"\" }}\n            SearchFormInputs={TransfersSearchForm}\n        />\n    );\n});\n","import * as Yup from \"yup\";\n\nconst TransferSchema = Yup.object({\n    productId: Yup.string()\n        .typeError(\"Product is required\")\n        .required(\"Product is required\"),\n\n    quantity: Yup.number()\n        .typeError(\"Quantity is required\")\n        .required(\"Quantity is required\")\n        .positive(\"Quantity must be greater than 0\")\n        .integer(\"Quantity must be an integer\"),\n\n    source: Yup.mixed()\n        .oneOf([\"store\", \"counter\"], \"Valid location are 'store' or 'counter'\"),\n});\n\nexport default TransferSchema;\n","import {useEffect, useMemo, useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {Formik} from \"formik\";\n\nimport {useAddNewTransferMutation} from \"./transferSlice\";\nimport {useGetProductsQuery} from \"../product/productSlice\";\nimport {Input, Select} from \"../../app/form/fields\";\nimport FormCard from \"../../app/card/FormCard\";\nimport ButtonSpinner from \"../../app/spinners/ButtonSpinner\";\nimport TransferSchema from \"./TransferSchema\";\nimport {Product} from \"../api\";\nimport {Message} from \"../../app/index\";\n\nexport const AddTransferForm = () => {\n    const [message, setMessage] = useState<Message | null>(null);\n    const [addNewTransfer] = useAddNewTransferMutation();\n    const allProducts = useGetProductsQuery(\"?limit=all\");\n    const products = useMemo(() => {\n        if (allProducts.isSuccess && allProducts.data.products) {\n            return allProducts.data.products.map( (product: Product) => ({ value: product.id, label: product.name }))\n        }\n        return [{ value: \"\", label: \"No results found\" }]\n    }, [allProducts.isSuccess, allProducts.data?.products]);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (message?.type && message?.message) {\n            window.scrollTo(0, 0);\n        }\n    }, [message?.type, message?.message])\n\n    const form = (\n        <Formik\n            initialValues={{ productId: \"\", quantity: \"\", source: \"\", destination: \"\" }}\n            validationSchema={TransferSchema}\n            onSubmit={async (values, actions) => {\n                const destination = values.source === \"store\" ? \"counter\" : \"store\";\n                values = { ...values, destination };\n                try {\n                    const {transfer, error, invalidData} = await addNewTransfer(values).unwrap();\n                    actions.setSubmitting(false);\n                    if (transfer) {\n                        const message = { type: \"success\", message: \"Transfer created successfully\" }\n                        history.push({\n                            pathname: \"/transfers\",\n                            state: { message }\n                        });\n                    }\n                    if (error) { setMessage({ type: \"danger\", message: error }) }\n                    if (invalidData) {\n                        actions.setErrors(invalidData);\n                        setMessage({ type: \"danger\", message: \"Please correct the errors below\" });\n                    }\n                } catch (error) {\n                    setMessage({ type: \"danger\", message: error.message });\n                }\n            }}\n        >\n            {props => (\n                <>\n                    <form onSubmit={props.handleSubmit}>\n                        <Select name=\"productId\" label=\"Select product\" options={products} required={true}>\n                            <option value=\"\">Select a product</option>\n                        </Select>\n                        <Input name=\"quantity\" label=\"Quantity\" type=\"number\" placeholder=\"Enter quantity\" required={true} />\n                        <Select name=\"source\" label=\"Select source location\" required={true}>\n                            <option value=\"\">Select source location</option>\n                            <option value=\"store\">Store</option>\n                            <option value=\"counter\">Counter</option>\n                        </Select>\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary rounded-0 me-2 mt-3\"\n                            disabled={props.isSubmitting}\n                        >\n                            {props.isSubmitting ? <ButtonSpinner text=\"Adding\" /> : \"Add\"}\n                        </button>\n                    </form>\n                </>\n            )}\n        </Formik>\n    );\n\n    return ( <FormCard title=\"Add Transfer\" message={message} setMessage={setMessage} cardBody={form} /> )\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Navbar from \"./app/Navbar\";\nimport {ScrollTop} from \"./app/ScrollTop\";\nimport {Footer} from \"./app/Footer\";\nimport Home from \"./Home\";\nimport {CategoriesList, AddCategoryForm, EditCategoryForm} from \"./features/category\";\nimport {ProductsList, AddProductForm, EditProductForm} from \"./features/product\";\nimport {PurchasesList, AddPurchaseForm, EditPurchaseForm} from \"./features/purchase\";\nimport {SalesList, AddSaleForm, EditSaleForm} from \"./features/sale\";\nimport {SuppliersList, AddSupplierForm, EditSupplierForm} from \"./features/supplier\";\nimport {TransfersList, AddTransferForm} from \"./features/transfer\";\n\n\nfunction App() {\n    return (\n        <>\n            <div className=\"min-vh-100\">\n                <Router>\n                    <Navbar/>\n                    <ScrollTop />\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n\n                        <Route exact path=\"/categories\" component={CategoriesList} />\n                        <Route exact path=\"/categories/create\" component={AddCategoryForm} />\n                        <Route exact path=\"/categories/:categoryId\" component={EditCategoryForm} />\n\n                        <Route exact path=\"/products\" component={ProductsList} />\n                        <Route exact path=\"/products/create\" component={AddProductForm} />\n                        <Route exact path=\"/products/:productId\" component={EditProductForm} />\n\n                        <Route exact path=\"/purchases\" component={PurchasesList} />\n                        <Route exact path=\"/purchases/create\" component={AddPurchaseForm} />\n                        <Route exact path=\"/purchases/:purchaseId\" component={EditPurchaseForm} />\n\n                        <Route exact path=\"/sales\" component={SalesList} />\n                        <Route exact path=\"/sales/create\" component={AddSaleForm} />\n                        <Route exact path=\"/sales/:saleId\" component={EditSaleForm} />\n\n                        <Route exact path=\"/suppliers\" component={SuppliersList} />\n                        <Route exact path=\"/suppliers/create\" component={AddSupplierForm} />\n                        <Route exact path=\"/suppliers/:supplierId\" component={EditSupplierForm} />\n\n                        <Route exact path=\"/transfers\" component={TransfersList} />\n                        <Route exact path=\"/transfers/create\" component={AddTransferForm} />\n\n\n                    </Switch>\n                </Router>\n            </div>\n            <Footer/>\n        </>\n    );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport {emptySplitApi} from \"../features/api/apiSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    [emptySplitApi.reducerPath]: emptySplitApi.reducer,\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(emptySplitApi.middleware)\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}